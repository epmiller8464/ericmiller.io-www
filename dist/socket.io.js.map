{"version":3,"sources":["../socket.io.js"],"names":["uuid","require","fs","path","moment","valueEncoding","level","server","app","opts","transports","log","origins","io","sockets","on","socket","data","fileName","v4","emit","console","audio","image","writeToDisk","error","result","message","set","Set","cb","dataURL","fileExtension","split","pop","fileRootNameWithBase","filePath","fileID","existsSync","ws","createWriteStream","write","Buffer","from","key","buildKeyName","email","put","audio_path","valueOf","module","exports"],"mappings":"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","file":"socket.io.js","sourcesContent":["'use strict'\nconst uuid = require('uuid')\nconst fs = require('fs')\nconst path = require('path')\nconst moment = require('moment')\n// const exec = require('child_process').exec\n// const FFmpeg = require('fluent-ffmpeg')\nconst {level} = require('./level')('vm', {valueEncoding: 'json'})\n\nfunction server (app) {\n\n  // var io = require('socket.io').listen(app)\n  var opts = {\n    transports: [\n      'polling',\n      'websocket',\n      'xhr-polling',\n      'jsonp-polling'\n    ],\n    log: true,\n    origins: '*:*'\n  }// 'disconnect' EVENT will work only with 'websocket\n  let io = require('socket.io')(app, opts)\n  io.sockets.on('connection', function (socket) {\n    socket.on('message', function (data) {\n      var fileName = uuid.v4()\n\n      socket.emit('ffmpeg-output', 0)\n      // console.log(data)\n      console.log('my nigga we have the image %s', data.audio.image)\n      writeToDisk(data.audio, fileName + '.wav', (error, result) => {\n\n        if (error) {\n          socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + error.message)\n          return\n        }\n        socket.emit('merged', fileName + '.wav')\n      })\n    })\n  })\n\n// isn't it redundant?\n// app.listen(8888);\n  const set = new Set()\n\n  function writeToDisk (audio, fileName, cb) {\n    let dataURL = audio.dataURL\n    let fileExtension = fileName.split('.').pop()\n    let fileRootNameWithBase = './uploads/' + fileName\n    let filePath = fileRootNameWithBase\n    let fileID = 2\n\n    // @todo return the new filename to client\n    while (fs.existsSync(filePath)) {\n      filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension\n      fileID += 1\n    }\n\n    dataURL = dataURL.split(',').pop()\n    // fileBuffer = new Buffer(dataURL, 'base64')\n    // fs.writeFileSync(filePath, fileBuffer)\n    let ws = fs.createWriteStream(filePath, 'base64').write(Buffer.from(dataURL, 'base64'))\n    console.log('filePath', filePath)\n    let key = buildKeyName(audio.email)\n    console.log(`key: ${key} path: ${filePath}`)\n    level.put(key, {image: audio.image, audio_path: filePath}, cb)\n  }\n\n  function buildKeyName (email) {\n    return `${email}.${moment().valueOf()}`\n  }\n\n  // function merge (socket, fileName) {\n  //\n  //   var audioFile = path.join(__dirname, 'uploads', fileName + '.wav'),\n  //     videoFile = path.join(__dirname, 'uploads', fileName + '.webm'),\n  //     mergedFile = path.join(__dirname, 'uploads', fileName + '-merged.webm')\n  //\n  //   new FFmpeg({\n  //     source: videoFile\n  //   })\n  //   .addInput(audioFile)\n  //   .addInput(audioFile)\n  //   .on('error', function (err) {\n  //     socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + err.message)\n  //     console.log(err)\n  //   })\n  //   .on('progress', function (progress) {\n  //     socket.emit('ffmpeg-output', Math.round(progress.percent))\n  //   })\n  //   .on('exit', function () {\n  //     console.log('some exit')\n  //   })\n  //   .on('end', function () {\n  //     // if (!set.has(fileName)) {\n  //     //   socket.emit('merged', fileName + '-merged.webm')\n  //     //   console.log('Merging finished !')\n  //     //   set.add(fileName)\n  //     // }\n  //\n  //     // removing audio/video files\n  //     fs.unlink(audioFile)\n  //     fs.unlink(videoFile)\n  //   })\n  //   .saveToFile(mergedFile)\n  //   // .writeToStream(fs.createWriteStream(mergedFile))\n  // }\n}\n\nmodule.exports = server"]}