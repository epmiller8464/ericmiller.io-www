{"version":3,"sources":["../socket.io.js"],"names":["uuid","require","writeToDisk","updateAndRemoveFile","Service","VoiceMessage","server","app","opts","transports","log","origins","io","sockets","on","socket","data","fileName","v4","emit","audio","error","doc","message","vm","id","_id","key","filename","AWS","upload","err","result","console","set","Set","module","exports"],"mappings":"AAAA;;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;eAE2CA,QAAQ,cAAR,C;IAApCC,W,YAAAA,W;IAAaC,mB,YAAAA,mB;;gBACFF,QAAQ,sBAAR,C;IAAXG,O,aAAAA,O;AACP;AACA;AACA;;;gBACuBH,QAAQ,aAAR,C;IAAhBI,Y,aAAAA,Y;;AACPJ,QAAQ,UAAR,EAAoB,YAAM,CAEzB,CAFD;;AAIA,SAASK,MAAT,CAAiBC,GAAjB,EAAsB;;AAEpB;AACA,MAAIC,OAAO;AACTC,gBAAY,CACV,SADU,EAEV,aAFU,EAGV,eAHU,CADH;AAMTC,SAAK,IANI;AAOTC,aAAS;AAPA,GAAX,CAHoB,CAWnB;AACD,MAAIC,KAAKX,QAAQ,WAAR,EAAqBM,GAArB,EAA0BC,IAA1B,CAAT;AACAI,KAAGC,OAAH,CAAWC,EAAX,CAAc,YAAd,EAA4B,UAAUC,MAAV,EAAkB;;AAE5CA,WAAOD,EAAP,CAAU,SAAV,EAAqB,UAAUE,IAAV,EAAgB;AACnC,UAAIC,WAAWjB,KAAKkB,EAAL,EAAf;;AAEAH,aAAOI,IAAP,CAAY,eAAZ,EAA6B,CAA7B;AACA;AACA;AACAjB,kBAAYc,KAAKI,KAAjB,EAAwBH,WAAW,MAAnC,EAA2C,UAACI,KAAD,EAAQC,GAAR,EAAgB;;AAEzD,YAAID,KAAJ,EAAW;AACTN,iBAAOI,IAAP,CAAY,cAAZ,EAA4B,iCAAiCE,MAAME,OAAnE;AACA;AACD;AACD,YAAIC,KAAKF,GAAT;AACAP,eAAOI,IAAP,CAAY,QAAZ,EAAsB,EAACF,UAAUA,WAAW,MAAtB,EAA8BQ,IAAID,GAAGE,GAArC,EAA0CC,KAAKH,GAAGI,QAAlD,EAAtB;AACD,OARD;AASD,KAfD;;AAiBAb,WAAOD,EAAP,CAAU,aAAV,EAAyB,UAAUE,IAAV,EAAgB;;AAEvC,UAAIY,WAAWZ,KAAKY,QAApB;AACA,UAAIH,KAAKT,KAAKS,EAAd;AACArB,cAAQyB,GAAR,CAAYC,MAAZ,CAAmBF,QAAnB,EAA6B,EAACH,MAAD,EAA7B,EAAmC,UAACM,GAAD,EAAMC,MAAN,EAAiB;AAClDC,gBAAQvB,GAAR,CAAYqB,GAAZ;AACAE,gBAAQvB,GAAR,CAAYsB,MAAZ;;AAEA7B,4BAAoByB,QAApB,EAA8BH,EAA9B,EAAkCO,MAAlC,EAA0C,UAACD,GAAD,EAAMP,EAAN,EAAa;AACrDT,iBAAOI,IAAP,CAAY,UAAZ,EAAwBK,EAAxB;AACD,SAFD;AAGD,OAPD;AAQD,KAZD;AAaD,GAhCD;;AAkCF;AACA;AACE,MAAMU,MAAM,IAAIC,GAAJ,EAAZ;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;AAEDC,OAAOC,OAAP,GAAiB/B,MAAjB","file":"socket.io.js","sourcesContent":["'use strict'\nconst uuid = require('uuid')\n\nconst {writeToDisk, updateAndRemoveFile} = require('./lib/vmware')\nconst {Service} = require('./lib/storageService')\n// const exec = require('child_process').exec\n// const FFmpeg = require('fluent-ffmpeg')\n// const {level} = require('./level')('vm', {valueEncoding: 'json'})\nconst {VoiceMessage} = require('./lib/model')\nrequire('./lib/db')(() => {\n\n})\n\nfunction server (app) {\n\n  // var io = require('socket.io').listen(app)\n  var opts = {\n    transports: [\n      'polling',\n      'xhr-polling',\n      'jsonp-polling'\n    ],\n    log: true,\n    origins: '*:*'\n  }// 'disconnect' EVENT will work only with 'websocket\n  let io = require('socket.io')(app, opts)\n  io.sockets.on('connection', function (socket) {\n\n    socket.on('message', function (data) {\n      var fileName = uuid.v4()\n\n      socket.emit('ffmpeg-output', 0)\n      // console.log(data)\n      // console.log('my nigga we have the image %s', data.audio.image)\n      writeToDisk(data.audio, fileName + '.wav', (error, doc) => {\n\n        if (error) {\n          socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + error.message)\n          return\n        }\n        let vm = doc\n        socket.emit('merged', {fileName: fileName + '.wav', id: vm._id, key: vm.filename})\n      })\n    })\n\n    socket.on('save-upload', function (data) {\n\n      let filename = data.filename\n      let id = data.id\n      Service.AWS.upload(filename, {id}, (err, result) => {\n        console.log(err)\n        console.log(result)\n\n        updateAndRemoveFile(filename, id, result, (err, vm) => {\n          socket.emit('uploaded', vm)\n        })\n      })\n    })\n  })\n\n// isn't it redundant?\n// app.listen(8888);\n  const set = new Set()\n\n// function merge (socket, fileName) {\n//\n//   var audioFile = path.join(__dirname, 'uploads', fileName + '.wav'),\n//     videoFile = path.join(__dirname, 'uploads', fileName + '.webm'),\n//     mergedFile = path.join(__dirname, 'uploads', fileName + '-merged.webm')\n//\n//   new FFmpeg({\n//     source: videoFile\n//   })\n//   .addInput(audioFile)\n//   .addInput(audioFile)\n//   .on('error', function (err) {\n//     socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + err.message)\n//     console.log(err)\n//   })\n//   .on('progress', function (progress) {\n//     socket.emit('ffmpeg-output', Math.round(progress.percent))\n//   })\n//   .on('exit', function () {\n//     console.log('some exit')\n//   })\n//   .on('end', function () {\n//     // if (!set.has(fileName)) {\n//     //   socket.emit('merged', fileName + '-merged.webm')\n//     //   console.log('Merging finished !')\n//     //   set.add(fileName)\n//     // }\n//\n//     // removing audio/video files\n//     fs.unlink(audioFile)\n//     fs.unlink(videoFile)\n//   })\n//   .saveToFile(mergedFile)\n//   // .writeToStream(fs.createWriteStream(mergedFile))\n// }\n}\n\nmodule.exports = server\n"]}