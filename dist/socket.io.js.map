{"version":3,"sources":["../socket.io.js"],"names":["uuid","require","fs","path","moment","valueEncoding","level","server","app","opts","transports","log","origins","io","sockets","on","socket","data","fileName","v4","emit","writeToDisk","audio","error","key","message","set","Set","cb","dataURL","fileExtension","split","pop","fileRootNameWithBase","filePath","fileID","existsSync","ws","createWriteStream","write","Buffer","from","buildKeyName","email","put","image","audio_path","read","waveForm","result","valueOf","module","exports"],"mappings":"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","file":"socket.io.js","sourcesContent":["'use strict'\nconst uuid = require('uuid')\nconst fs = require('fs')\nconst path = require('path')\nconst moment = require('moment')\n// const exec = require('child_process').exec\n// const FFmpeg = require('fluent-ffmpeg')\nconst {level} = require('./level')('vm', {valueEncoding: 'json'})\n\nfunction server (app) {\n\n  // var io = require('socket.io').listen(app)\n  var opts = {\n    transports: [\n      'polling',\n      'websocket',\n      'xhr-polling',\n      'jsonp-polling'\n    ],\n    log: true,\n    origins: '*:*'\n  }// 'disconnect' EVENT will work only with 'websocket\n  let io = require('socket.io')(app, opts)\n  io.sockets.on('connection', function (socket) {\n    socket.on('message', function (data) {\n      var fileName = uuid.v4()\n\n      socket.emit('ffmpeg-output', 0)\n      // console.log(data)\n      // console.log('my nigga we have the image %s', data.audio.image)\n      writeToDisk(data.audio, fileName + '.wav', (error, key) => {\n\n        if (error) {\n          socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + error.message)\n          return\n        }\n        socket.emit('merged', {fileName: fileName + '.wav', key: key})\n      })\n    })\n  })\n\n// isn't it redundant?\n// app.listen(8888);\n  const set = new Set()\n\n  function writeToDisk (audio, fileName, cb) {\n    let dataURL = audio.dataURL\n    let fileExtension = fileName.split('.').pop()\n    let fileRootNameWithBase = './uploads/' + fileName\n    let filePath = fileRootNameWithBase\n    let fileID = 2\n\n    // @todo return the new filename to client\n    while (fs.existsSync(filePath)) {\n      filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension\n      fileID += 1\n    }\n\n    dataURL = dataURL.split(',').pop()\n    // fileBuffer = new Buffer(dataURL, 'base64')\n    // fs.writeFileSync(filePath, fileBuffer)\n    let ws = fs.createWriteStream(filePath, 'base64').write(Buffer.from(dataURL, 'base64'))\n    // console.log('filePath', filePath)\n    let key = buildKeyName(audio.email)\n    // console.log(`key: ${key} path: ${filePath}`)\n    level.put(key, {image: audio.image, audio_path: filePath, read: false, waveForm: audio.waveForm}, (result) => {\n\n      cb(null, key)\n      // if (!result) {\n      //   cb(null, new Error('opps something bad happened'))\n      // } else {\n      // }\n    })\n  }\n\n  function buildKeyName (email) {\n    return `${email}.${moment().valueOf()}`\n  }\n\n// function merge (socket, fileName) {\n//\n//   var audioFile = path.join(__dirname, 'uploads', fileName + '.wav'),\n//     videoFile = path.join(__dirname, 'uploads', fileName + '.webm'),\n//     mergedFile = path.join(__dirname, 'uploads', fileName + '-merged.webm')\n//\n//   new FFmpeg({\n//     source: videoFile\n//   })\n//   .addInput(audioFile)\n//   .addInput(audioFile)\n//   .on('error', function (err) {\n//     socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + err.message)\n//     console.log(err)\n//   })\n//   .on('progress', function (progress) {\n//     socket.emit('ffmpeg-output', Math.round(progress.percent))\n//   })\n//   .on('exit', function () {\n//     console.log('some exit')\n//   })\n//   .on('end', function () {\n//     // if (!set.has(fileName)) {\n//     //   socket.emit('merged', fileName + '-merged.webm')\n//     //   console.log('Merging finished !')\n//     //   set.add(fileName)\n//     // }\n//\n//     // removing audio/video files\n//     fs.unlink(audioFile)\n//     fs.unlink(videoFile)\n//   })\n//   .saveToFile(mergedFile)\n//   // .writeToStream(fs.createWriteStream(mergedFile))\n// }\n}\n\nmodule.exports = server\n"]}