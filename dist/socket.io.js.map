{"version":3,"sources":["../socket.io.js"],"names":["uuid","require","writeToDisk","updateAndRemoveFile","Service","jwt","VoiceMessage","ch","server","app","opts","transports","log","origins","io","sockets","on","socket","data","audio","token","emit","sign","console","validationResults","verify","process","env","JWT_SIGNATURE","jwtid","err","payload","fileName","v4","error","doc","message","vm","id","_id","key","filename","AWS","upload","result","c","module","exports"],"mappings":"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","file":"socket.io.js","sourcesContent":["'use strict'\nconst uuid = require('uuid')\n\nconst {writeToDisk, updateAndRemoveFile} = require('./lib/vmware')\nconst {Service} = require('./lib/storageService')\nconst jwt = require('jsonwebtoken')\n// const exec = require('child_process').exec\n// const FFmpeg = require('fluent-ffmpeg')\n// const {level} = require('./level')('vm', {valueEncoding: 'json'})\nconst {VoiceMessage} = require('./lib/model')\nconst ch = require('./lib/callHandler')()\nrequire('./lib/db')(() => {\n\n})\n\nfunction server (app) {\n\n  // var io = require('socket.io').listen(app)\n\n  var opts = {\n    transports: [\n      'polling',\n      'xhr-polling',\n      'jsonp-polling'\n    ],\n    log: true,\n    origins: '*:*'\n  }// 'disconnect' EVENT will work only with 'websocket\n  let io = require('socket.io')(app, opts)\n  io.sockets.on('connection', function (socket) {\n\n    socket.on('message', function (data) {\n      // add token logic\n      // data.token\n      if (!data.audio.token) {\n        socket.emit('ffmpeg-error', 'Cannot save unvalidated file must contain a valid and signed JWT.')\n        return\n      }\n\n      let sign = data.audio.token\n      console.log(sign)\n      let validationResults = jwt.verify(sign.token, process.env.JWT_SIGNATURE, {jwtid: sign.jwtid}, (err, payload) => {\n\n        if (err) {\n          socket.emit('ffmpeg-error', 'Could not validate file signature.')\n          return\n        }\n\n        var fileName = uuid.v4()\n\n        socket.emit('ffmpeg-output', 0)\n        // console.log(data)\n        // console.log('my nigga we have the image %s', data.audio.image)\n        writeToDisk(data.audio, fileName + '.wav', (error, doc) => {\n\n          if (error) {\n            socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + error.message)\n            return\n          }\n          let vm = doc\n          socket.emit('merged', {fileName: fileName + '.wav', id: vm._id, key: vm.filename})\n        })\n      })\n    })\n\n    socket.on('save-upload', function (data) {\n\n      let filename = data.filename\n      let id = data.id\n      Service.AWS.upload(filename, {id}, (err, result) => {\n        console.log(err)\n        console.log(result)\n\n        updateAndRemoveFile(filename, id, result, (err, vm) => {\n          socket.emit('uploaded', vm)\n        })\n      })\n    })\n\n    ch.on('new-call', (c) => {\n      socket.emit('incoming-call', c)\n      console.log('incoming-call %s', c)\n    })\n  })\n}\n\nmodule.exports = server\n"]}