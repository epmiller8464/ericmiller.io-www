{"version":3,"sources":["../socket.io.js"],"names":["uuid","require","fs","path","exec","FFmpeg","server","app","opts","transports","log","origins","io","sockets","on","socket","data","fileName","v4","emit","console","writeToDisk","audio","dataURL","set","Set","fileExtension","split","pop","fileRootNameWithBase","filePath","fileID","fileBuffer","existsSync","Buffer","ws","createWriteStream","write","module","exports"],"mappings":"AAAA;;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,OAAOH,QAAQ,eAAR,EAAyBG,IAAtC;AACA,IAAMC,SAASJ,QAAQ,eAAR,CAAf;;AAEA,SAASK,MAAT,CAAiBC,GAAjB,EAAsB;;AAEpB;AACA,MAAIC,OAAO;AACTC,gBAAY,CACV,SADU,EAEV,WAFU,EAGV,aAHU,EAIV,eAJU,CADH;AAOTC,SAAK,KAPI;AAQTC,aAAS;AARA,GAAX,CAHoB,CAYnB;AACD,MAAIC,KAAKX,QAAQ,WAAR,EAAqBM,GAArB,EAA0BC,IAA1B,CAAT;AACAI,KAAGC,OAAH,CAAWC,EAAX,CAAc,YAAd,EAA4B,UAAUC,MAAV,EAAkB;AAC5CA,WAAOD,EAAP,CAAU,SAAV,EAAqB,UAAUE,IAAV,EAAgB;AACnC,UAAIC,WAAWjB,KAAKkB,EAAL,EAAf;;AAEAH,aAAOI,IAAP,CAAY,eAAZ,EAA6B,CAA7B;AACAC,cAAQV,GAAR,CAAYM,IAAZ;AACAK,kBAAYL,KAAKM,KAAL,CAAWC,OAAvB,EAAgCN,WAAW,MAA3C;AACAF,aAAOI,IAAP,CAAY,QAAZ,EAAsBF,WAAW,MAAjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAhBD;AAiBD,GAlBD;;AAoBF;AACA;AACE,MAAMO,MAAM,IAAIC,GAAJ,EAAZ;;AAEA,WAASJ,WAAT,CAAsBE,OAAtB,EAA+BN,QAA/B,EAAyC;AACvC,QAAIS,gBAAgBT,SAASU,KAAT,CAAe,GAAf,EAAoBC,GAApB,EAApB;AAAA,QACEC,uBAAuB,eAAeZ,QADxC;AAAA,QAEEa,WAAWD,oBAFb;AAAA,QAGEE,SAAS,CAHX;AAAA,QAIEC,UAJF;;AAMA;AACA,WAAO9B,GAAG+B,UAAH,CAAcH,QAAd,CAAP,EAAgC;AAC9BA,iBAAWD,uBAAuB,GAAvB,GAA6BE,MAA7B,GAAsC,IAAtC,GAA6CL,aAAxD;AACAK,gBAAU,CAAV;AACD;;AAEDR,cAAUA,QAAQI,KAAR,CAAc,GAAd,EAAmBC,GAAnB,EAAV;AACAI,iBAAa,IAAIE,MAAJ,CAAWX,OAAX,EAAoB,QAApB,CAAb;AACA;AACA,QAAIY,KAAKjC,GAAGkC,iBAAH,CAAqBN,QAArB,EAA+B,QAA/B,EAAyCO,KAAzC,CAA+C,IAAIH,MAAJ,CAAWX,OAAX,EAAoB,QAApB,CAA/C,CAAT;AACA;AACAH,YAAQV,GAAR,CAAY,UAAZ,EAAwBoB,QAAxB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDQ,OAAOC,OAAP,GAAiBjC,MAAjB","file":"socket.io.js","sourcesContent":["'use strict'\nconst uuid = require('uuid')\nconst fs = require('fs')\nconst path = require('path')\nconst exec = require('child_process').exec\nconst FFmpeg = require('fluent-ffmpeg')\n\nfunction server (app) {\n\n  // var io = require('socket.io').listen(app)\n  var opts = {\n    transports: [\n      'polling',\n      'websocket',\n      'xhr-polling',\n      'jsonp-polling'\n    ],\n    log: false,\n    origins: '*:*'\n  }// 'disconnect' EVENT will work only with 'websocket\n  let io = require('socket.io')(app, opts)\n  io.sockets.on('connection', function (socket) {\n    socket.on('message', function (data) {\n      var fileName = uuid.v4()\n\n      socket.emit('ffmpeg-output', 0)\n      console.log(data)\n      writeToDisk(data.audio.dataURL, fileName + '.wav')\n      socket.emit('merged', fileName + '.wav')\n\n      // if it is chrome\n      // if (data.video) {\n      //   writeToDisk(data.video.dataURL, fileName + '.webm')\n      //   merge(socket, fileName)\n      // }\n      // // if it is firefox or if user is recording only audio\n      // else {\n      // }\n    })\n  })\n\n// isn't it redundant?\n// app.listen(8888);\n  const set = new Set()\n\n  function writeToDisk (dataURL, fileName) {\n    var fileExtension = fileName.split('.').pop(),\n      fileRootNameWithBase = './uploads/' + fileName,\n      filePath = fileRootNameWithBase,\n      fileID = 2,\n      fileBuffer\n\n    // @todo return the new filename to client\n    while (fs.existsSync(filePath)) {\n      filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension\n      fileID += 1\n    }\n\n    dataURL = dataURL.split(',').pop()\n    fileBuffer = new Buffer(dataURL, 'base64')\n    // fs.writeFileSync(filePath, fileBuffer)\n    let ws = fs.createWriteStream(filePath, 'base64').write(new Buffer(dataURL, 'base64'))\n    // ws.end()\n    console.log('filePath', filePath)\n  }\n\n  // function merge (socket, fileName) {\n  //\n  //   var audioFile = path.join(__dirname, 'uploads', fileName + '.wav'),\n  //     videoFile = path.join(__dirname, 'uploads', fileName + '.webm'),\n  //     mergedFile = path.join(__dirname, 'uploads', fileName + '-merged.webm')\n  //\n  //   new FFmpeg({\n  //     source: videoFile\n  //   })\n  //   .addInput(audioFile)\n  //   .addInput(audioFile)\n  //   .on('error', function (err) {\n  //     socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + err.message)\n  //     console.log(err)\n  //   })\n  //   .on('progress', function (progress) {\n  //     socket.emit('ffmpeg-output', Math.round(progress.percent))\n  //   })\n  //   .on('exit', function () {\n  //     console.log('some exit')\n  //   })\n  //   .on('end', function () {\n  //     // if (!set.has(fileName)) {\n  //     //   socket.emit('merged', fileName + '-merged.webm')\n  //     //   console.log('Merging finished !')\n  //     //   set.add(fileName)\n  //     // }\n  //\n  //     // removing audio/video files\n  //     fs.unlink(audioFile)\n  //     fs.unlink(videoFile)\n  //   })\n  //   .saveToFile(mergedFile)\n  //   // .writeToStream(fs.createWriteStream(mergedFile))\n  // }\n}\n\nmodule.exports = server"]}