{"version":3,"sources":["../socket.io.js"],"names":["uuid","require","fs","server","app","path","exec","opts","transports","log","origins","io","sockets","on","socket","data","fileName","v4","emit","writeToDisk","audio","dataURL","video","merge","fileExtension","split","pop","fileRootNameWithBase","filePath","fileID","fileBuffer","existsSync","Buffer","writeFileSync","console","FFmpeg","audioFile","join","__dirname","videoFile","mergedFile","source","addInput","err","message","progress","Math","round","percent","unlink","saveToFile","module","exports"],"mappings":"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","file":"socket.io.js","sourcesContent":["'use strict'\nconst uuid = require('node-uuid')\nconst fs = require('fs')\nfunction server (app) {\n  var path = require('path'),\n    exec = require('child_process').exec\n\n  // var io = require('socket.io').listen(app)\n  var opts = {\n    transports: [\n      'polling',\n      'websocket',\n      'xhr-polling',\n      'jsonp-polling'\n    ],\n    log: false,\n    origins: '*:*'\n  }// 'disconnect' EVENT will work only with 'websocket\n  let io = require('socket.io')(app, opts)\n  io.sockets.on('connection', function (socket) {\n    socket.on('message', function (data) {\n      var fileName = uuid.v4()\n\n      socket.emit('ffmpeg-output', 0)\n\n      writeToDisk(data.audio.dataURL, fileName + '.wav')\n\n      // if it is chrome\n      if (data.video) {\n        writeToDisk(data.video.dataURL, fileName + '.webm')\n        merge(socket, fileName)\n      }\n\n      // if it is firefox or if user is recording only audio\n      else socket.emit('merged', fileName + '.wav')\n    })\n  })\n\n// isn't it redundant?\n// app.listen(8888);\n\n  function writeToDisk (dataURL, fileName) {\n    var fileExtension = fileName.split('.').pop(),\n      fileRootNameWithBase = './uploads/' + fileName,\n      filePath = fileRootNameWithBase,\n      fileID = 2,\n      fileBuffer\n\n    // @todo return the new filename to client\n    while (fs.existsSync(filePath)) {\n      filePath = fileRootNameWithBase + '(' + fileID + ').' + fileExtension\n      fileID += 1\n    }\n\n    dataURL = dataURL.split(',').pop()\n    fileBuffer = new Buffer(dataURL, 'base64')\n    fs.writeFileSync(filePath, fileBuffer)\n\n    console.log('filePath', filePath)\n  }\n\n  function merge (socket, fileName) {\n    var FFmpeg = require('fluent-ffmpeg')\n\n    var audioFile = path.join(__dirname, 'uploads', fileName + '.wav'),\n      videoFile = path.join(__dirname, 'uploads', fileName + '.webm'),\n      mergedFile = path.join(__dirname, 'uploads', fileName + '-merged.webm')\n\n    new FFmpeg({\n      source: videoFile\n    })\n    .addInput(audioFile)\n    .on('error', function (err) {\n      socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + err.message)\n    })\n    .on('progress', function (progress) {\n      socket.emit('ffmpeg-output', Math.round(progress.percent))\n    })\n    .on('end', function () {\n      socket.emit('merged', fileName + '-merged.webm')\n      console.log('Merging finished !')\n\n      // removing audio/video files\n      fs.unlink(audioFile)\n      fs.unlink(videoFile)\n    })\n    .saveToFile(mergedFile)\n  }\n}\n\nmodule.exports = server"]}