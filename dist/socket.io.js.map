{"version":3,"sources":["../socket.io.js"],"names":["uuid","require","writeToDisk","updateAndRemoveFile","Service","jwt","VoiceMessage","ch","createChannel","findChannel","pino","db","room","user","noop","rooms","io","controller","server","app","notifier","opts","transports","log","origins","sockets","on","socket","clientId","v4","data","audio","token","emit","sign","console","verify","process","env","JWT_SIGNATURE","jwtid","err","payload","message","fileName","jti","email","error","doc","vm","id","_id","key","filename","AWS","upload","result","rid","nsp","of","bot","spawn","channel","createRoom","cb","from","peers","broadcaster","channelIsReady","saveRoom","info","join","getRoom","r","username","toString","to","msg","broadcast","e","roomId","length","replace","get","JSON","parse","module","exports"],"mappings":"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","file":"socket.io.js","sourcesContent":["'use strict'\nconst uuid = require('uuid')\n\nconst {writeToDisk, updateAndRemoveFile} = require('./lib/vmware')\nconst {Service} = require('./lib/storageService')\nconst jwt = require('jsonwebtoken')\nconst {VoiceMessage} = require('./lib/model')\nconst ch = require('./lib/callevent')()\nconst {createChannel, findChannel} = require('./lib/channel')\n\nvar pino = require('pino')()\nvar db = require('./lib/data-store/memory-store')('vm')\nvar room = require('./lib/room')\nvar user = require('./lib/user')\n\nvar noop = function () {}\nvar rooms = {}\n\nlet io\nlet controller\n\nfunction server (app, notifier) {\n\n  // var io = require('socket.io').listen(app)\n\n  var opts = {\n    transports: [\n      'polling',\n      'websocket',\n      'xhr-polling',\n      'jsonp-polling'\n    ],\n    log: true,\n    origins: '*:*'\n  }// 'disconnect' EVENT will work only with 'websocket\n  io = require('socket.io')(app, opts)\n  controller = require('./lib/bot/mebot')({io})\n\n  io.sockets.on('connection', function (socket) {\n    // var bot = controller.spawn({socket})\n    let clientId = uuid.v4()\n    // socket.id = clientId\n    socket.on('message', function (data) {\n      // add token logic\n      // data.token\n      if (!data.audio.token) {\n        socket.emit('ffmpeg-error', 'Cannot save unvalidated file must contain a valid and signed JWT.')\n        return\n      }\n\n      let sign = data.audio.token\n      console.log(sign)\n      jwt.verify(sign.token, process.env.JWT_SIGNATURE, {jwtid: sign.jwtid}, (err, payload) => {\n\n        if (err) {\n          socket.emit('ffmpeg-error', `Could not validate file signature. ${err.message}`)\n          return\n        }\n\n        var fileName = payload.jti\n\n        socket.emit('ffmpeg-output', 0)\n        // console.log(data)\n        // console.log('my nigga we have the image %s', data.audio.image)\n        data.audio.email = payload.email\n        writeToDisk(data.audio, fileName + '.wav', (error, doc) => {\n\n          if (error) {\n            socket.emit('ffmpeg-error', 'ffmpeg : An error occurred: ' + error.message)\n            return\n          }\n          let vm = doc\n          socket.emit('merged', {fileName: fileName + '.wav', id: vm._id, key: vm.filename})\n        })\n      })\n    })\n\n    socket.on('save-upload', function (data) {\n\n      let filename = data.filename\n      let id = data.id\n      Service.AWS.upload(filename, {id}, (err, result) => {\n        console.log(err)\n        console.log(result)\n\n        updateAndRemoveFile(filename, id, result, (err, vm) => {\n          socket.emit('uploaded', vm)\n        })\n      })\n    })\n    socket.on('bot:new-room', (rid) => {\n      let nsp = io.of(`/${rid}`)\n      var bot = controller.spawn({socket: nsp, channel: rid})\n\n    })\n    // socket.on('bot', (data) => {\n    //\n    //   let payload = {\n    //     text: data,\n    //     user: data.user || socket.id,\n    //     channel: 'text',\n    //     timestamp: Date.now()\n    //   }\n    //\n    //   // controller.trigger('socket:message_received', [bot, payload])\n    //   controller.recievedMessage(payload)\n    // })\n    // controller.connect(socket)\n\n    socket.on('disconnect', function () {\n\n      //room.nsp.emit('leaving')\n      //\n    })\n  })\n  notifier.on('bot:create-room', function (rid) {\n\n    var bot = controller.spawn({io: io, channel: rid})\n  })\n}\n\nfunction createRoom (data, cb) {\n\n  cb = cb || noop\n  createChannel(data.channel, data.from)\n  var room = new room({\n    id: data.channel,\n    channel: data.channel,\n    peers: null,\n    broadcaster: null,\n    channelIsReady: false\n  })\n\n  saveRoom(room, function (err, room) {\n    pino.info('room %s created', room.channel)\n    var nsp = io.of('/' + data.channel)\n    nsp.on('connection', function (socket) {\n      pino.info('new connection in room: %s ', room.channel)\n\n      socket.join(room.channel)\n\n      socket.on('join-broadcast', function (data) {\n        var user\n        getRoom(data.channel, function (err, r) {\n\n          if (!r.peers) {\n            r.peers = {}\n          }\n\n          if (r.peers[data.id]) {\n            user = r.peers[data.id]\n          } else {\n            user = new user({\n              id: socket.id,\n              username: data.username,\n              channel: data.channel\n            })\n          }\n\n          if (!r.broadcaster) {\n            r.broadcaster = user.id.toString()\n            user.broadcaster = true\n          }\n          r.peers[user.id] = user\n\n          if (user.broadcaster) {\n            socket.emit('start-broadcasting')\n          } else {\n            //socket.emit('join-broadcast', user);\n            nsp.to(r.broadcaster).emit('call-peer', user)\n            nsp.to(user.id).emit('join-broadcast', {broadcaster: r.broadcaster})\n\n          }\n          saveRoom(r)\n        })\n      })\n\n      socket.on('message', function (msg) {\n        console.log('incoming msg %s', msg)\n        if (msg.to) {\n          nsp.to(msg.to).emit('message', msg)\n        } else {\n          socket.broadcast.emit('message', msg)\n        }\n      })\n      socket.on('disconnect', function (e) {\n        if (e) {\n          console.log('opps RoomServer encountered an error: %s', e)\n        }\n      })\n\n      socket.on('error', function (e) {\n\n        if (e) {\n          console.log('opps RoomServer encountered an error: %s', e)\n        }\n      })\n    })\n  })\n}\n\nfunction getRoom (roomId, cb) {\n  cb = cb || noop\n\n  if (!(roomId) || roomId.toString().length == 0)\n    cb(null, null)\n  roomId = roomId.replace('/', '')\n  db.get(roomId, function (err, r) {\n    var room = r ? JSON.parse(r) : null\n    return cb(err, room)\n  })\n}\n\nmodule.exports = server\n"]}