{"version":3,"sources":["../../../lib/bot/io_bot.js"],"names":["Botkit","require","core","readline","IoBot","configuration","io_bot","bots","utterances","yes","RegExp","no","quit","middleware","spawn","use","bot","next","listen","format","message","platform_message","k","defineBot","botkit","config","socket","createConversation","cb","startConversation","send","console","log","text","to","channel","emit","reply","src","resp","msg","say","findConversation","debug","user","t","tasks","length","c","convos","isActive","source_message","startTicking","io","nsp","of","on","join","trigger","id","from","timestamp","Date","now","data","ingest","module","exports"],"mappings":"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","file":"io_bot.js","sourcesContent":["'use strict'\nlet Botkit = require('botkit').core\nlet readline = require('readline')\n\nfunction IoBot (configuration) {\n\n  // Create a core botkit bot\n  let io_bot = Botkit(configuration || {})\n  let bots = {}\n  io_bot.utterances = {\n    yes: new RegExp(/^(yes|yea|yup|yep|ya|sure|ok|y|yeah|yah)/i),\n    no: new RegExp(/^(no|nah|nope|n)/i),\n    quit: new RegExp(/^(quit|cancel|end|stop|done|exit|nevermind|never mind)/i)\n  }\n  // io_bot.middleware.spawn.use(function (bot, next) {\n  //   // console.log()\n  //   if(bots[bot.config.channel]){\n  //     return bots[bot.config.channel]\n  //   }\n  //   io_bot.listen(bot)\n  //   next()\n  // })\n  io_bot.middleware.spawn.use(function (bot, next) {\n    // console.log()\n    // if (bots[bot.config.channel]) {\n    //   bot = bots[bot.config.channel]\n    // next()\n    // } else {\n    //   bots[bot.config.channel] = bot\n    io_bot.listen(bot)\n    // }\n    next()\n  })\n  io_bot.middleware.format.use(function (bot, message, platform_message, next) {\n    // clone the incoming message\n    // Object.assign(platform_message, message)\n    for (let k in message) {\n      platform_message[k] = message[k]\n    }\n    next()\n  })\n\n  io_bot.defineBot(function (botkit, config) {\n\n    let bot = {\n      botkit: botkit,\n      config: config || {},\n      utterances: botkit.utterances,\n      socket: config.socket\n    }\n\n    bot.createConversation = function (message, cb) {\n      botkit.createConversation(this, message, cb)\n    }\n\n    bot.startConversation = function (message, cb) {\n      botkit.startConversation(this, message, cb)\n    }\n\n    bot.send = function (message, cb) {\n      console.log('BOT:', message.text)\n      // bot.socket.emit('bot:message', message.text)\n      // bot.socket.broadcast.emit('bot:message', message.text)\n      // bot.socket.to(message.id).emit('bot:message', message)\n      bot.socket.to(bot.config.channel).emit('bot:message', message)\n      if (cb) {\n        cb()\n      }\n    }\n\n    bot.reply = function (src, resp, cb) {\n      let msg = {}\n\n      if (typeof(resp) == 'string') {\n        msg.text = resp\n      } else {\n        msg = resp\n      }\n\n      msg.channel = src.channel\n\n      bot.say(msg, cb)\n    }\n\n    bot.findConversation = function (message, cb) {\n      botkit.debug('CUSTOM FIND CONVO', message.user, message.channel)\n      for (let t = 0; t < botkit.tasks.length; t++) {\n        for (let c = 0; c < botkit.tasks[t].convos.length; c++) {\n          if (botkit.tasks[t].convos[c].isActive() && botkit.tasks[t].convos[c].source_message.user === message.user) {\n            botkit.debug('FOUND EXISTING CONVO!')\n            cb(botkit.tasks[t].convos[c])\n            return\n          }\n        }\n      }\n\n      cb()\n    }\n    return bot\n  })\n\n  io_bot.listen = function (bot) {\n\n    io_bot.startTicking()\n    let io = bot.config.io\n    let nsp = io.of(`/${bot.config.channel}`)\n    bot.socket = nsp\n    nsp.on('connection', function (socket) {\n      // pino.info('new connection in room: %s ', room.channel)\n      // bot.socket = socket\n      socket.join(bot.config.channel)\n\n      io_bot.trigger('say:greeting', [bot, {\n        text: '',\n        user: socket.id || 'Anonymous',\n        id: socket.id,\n        from: 'MEBOT',\n        channel: 'text',\n        timestamp: Date.now()\n      }])\n\n      socket.on('bot:message', (data) => {\n\n        let message = {\n          text: data.text,\n          user: socket.id || 'Anonymous',\n          id: socket.id,\n          from: 'MEBOT',\n          channel: 'text',\n          timestamp: Date.now()\n        }\n        io_bot.ingest(bot, message, null)\n        // controller.trigger('socket:message_received', [bot, payload])\n      })\n    })\n  }\n\n  return io_bot\n}\n\nmodule.exports = IoBot\n"]}