{"version":3,"sources":["../../../lib/bot/index.js"],"names":["IoBot","require","os","module","exports","config","controller","debug","socket","bot","spawn","on","message","hears","storage","users","get","user","err","name","reply","match","id","save","startConversation","convo","say","ask","response","text","pattern","callback","next","stop","default","repeat","status","extractResponse","utterances","yes","setTimeout","process","exit","no","hostname","uptime","formatUptime","unit"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\n// var Botkit = require('botkit')\nconst IoBot = require('./io_bot')\nvar os = require('os')\n\nmodule.exports = function (config) {\n\n  var controller = IoBot({\n    debug: true,\n    // add: ref to io for use in transport\n    socket: config.socket\n  })\n\n  var bot = controller.spawn({})\n\n// const RTM\n\n  controller.on('me:live:dialoge', function (message) {\n\n    //todo ping me via sms, start convo listen for me or timeout then present follow up option\n\n  })\n\n  controller.on('me:present', function (message) {\n\n    //todo ping me via sms, start convo listen for me or timeout then present follow up option\n\n  })\n\n  controller.hears(['hello', 'hi'], 'message_received', function (bot, message) {\n\n    controller.storage.users.get(message.user, function (err, user) {\n      if (user && user.name) {\n        bot.reply(message, 'Hello ' + user.name + '!!')\n      } else {\n        bot.reply(message, 'Hello.')\n      }\n    })\n  })\n\n  controller.hears(['call me (.*)', 'my name is (.*)'], 'message_received', function (bot, message) {\n    var name = message.match[1]\n    controller.storage.users.get(message.user, function (err, user) {\n      if (!user) {\n        user = {\n          id: message.user,\n        }\n      }\n      user.name = name\n      controller.storage.users.save(user, function (err, id) {\n        bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.')\n      })\n    })\n  })\n\n  controller.hears(['what is my name', 'who am i'], 'message_received', function (bot, message) {\n\n    controller.storage.users.get(message.user, function (err, user) {\n      if (user && user.name) {\n        bot.reply(message, 'Your name is ' + user.name)\n      } else {\n        bot.startConversation(message, function (err, convo) {\n          if (!err) {\n            convo.say('I do not know your name yet!')\n            convo.ask('What should I call you?', function (response, convo) {\n              convo.ask('You want me to call you `' + response.text + '`?', [\n                {\n                  pattern: 'yes',\n                  callback: function (response, convo) {\n                    // since no further messages are queued after this,\n                    // the conversation will end naturally with status == 'completed'\n                    convo.next()\n                  }\n                },\n                {\n                  pattern: 'no',\n                  callback: function (response, convo) {\n                    // stop the conversation. this will cause it to end with status == 'stopped'\n                    convo.stop()\n                  }\n                },\n                {\n                  default: true,\n                  callback: function (response, convo) {\n                    convo.repeat()\n                    convo.next()\n                  }\n                }\n              ])\n\n              convo.next()\n\n            }, {'key': 'nickname'}) // store the results in a field called nickname\n\n            convo.on('end', function (convo) {\n              if (convo.status == 'completed') {\n                bot.reply(message, 'OK! I will update my dossier...')\n\n                controller.storage.users.get(message.user, function (err, user) {\n                  if (!user) {\n                    user = {\n                      id: message.user,\n                    }\n                  }\n                  user.name = convo.extractResponse('nickname')\n                  controller.storage.users.save(user, function (err, id) {\n                    bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.')\n                  })\n                })\n\n              } else {\n                // this happens if the conversation ended prematurely for some reason\n                bot.reply(message, 'OK, nevermind!')\n              }\n            })\n          }\n        })\n      }\n    })\n  })\n\n  controller.hears(['shutdown'], 'message_received', function (bot, message) {\n\n    bot.startConversation(message, function (err, convo) {\n\n      convo.ask('Are you sure you want me to shutdown?', [\n        {\n          pattern: bot.utterances.yes,\n          callback: function (response, convo) {\n            convo.say('Bye!')\n            convo.next()\n            setTimeout(function () {\n              process.exit()\n            }, 3000)\n          }\n        },\n        {\n          pattern: bot.utterances.no,\n          default: true,\n          callback: function (response, convo) {\n            convo.say('*Phew!*')\n            convo.next()\n          }\n        }\n      ])\n    })\n  })\n\n  controller.hears(['uptime', 'identify yourself', 'who are you', 'what is your name'],\n    'message_received', function (bot, message) {\n\n      var hostname = os.hostname()\n      var uptime = formatUptime(process.uptime())\n\n      bot.reply(message,\n        ':robot_face: I am ConsoleBot. I have been running for ' + uptime + ' on ' + hostname + '.')\n\n    })\n\n  function formatUptime (uptime) {\n    var unit = 'second'\n    if (uptime > 60) {\n      uptime = uptime / 60\n      unit = 'minute'\n    }\n    if (uptime > 60) {\n      uptime = uptime / 60\n      unit = 'hour'\n    }\n    if (uptime != 1) {\n      unit = unit + 's'\n    }\n\n    uptime = uptime + ' ' + unit\n    return uptime\n  }\n\n  return controller\n}\n"]}