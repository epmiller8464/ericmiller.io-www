{"version":3,"sources":["../../../lib/data-store/simple_storage.js"],"names":["Store","require","module","exports","config","path","teams_db","saveId","users_db","channels_db","objectsToList","cb","err","data","Object","keys","map","key","storage","teams","get","team_id","save","team_data","id","delete","all","users","user_id","user","channels","channel_id","channel"],"mappings":"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","file":"simple_storage.js","sourcesContent":["/*\nStorage module for bots.\n\nSupports storage of data on a team-by-team, user-by-user, and chnnel-by-channel basis.\n\nsave can be used to store arbitrary object.\nThese objects must include an id by which they can be looked up.\nIt is recommended to use the team/user/channel id for this purpose.\nExample usage of save:\ncontroller.storage.teams.save({id: message.team, foo:\"bar\"}, function(err){\n  if (err)\n    console.log(err)\n});\n\nget looks up an object by id.\nExample usage of get:\ncontroller.storage.teams.get(message.team, function(err, team_data){\n  if (err)\n    console.log(err)\n  else\n    console.log(team_data)\n});\n*/\n\nvar Store = require('jfs')\n\nmodule.exports = function (config) {\n\n  if (!config) {\n    config = {\n      path: './',\n    }\n  }\n\n  var teams_db = new Store(config.path + '/teams', {saveId: 'id'})\n  var users_db = new Store(config.path + '/users', {saveId: 'id'})\n  var channels_db = new Store(config.path + '/channels', {saveId: 'id'})\n\n  var objectsToList = function (cb) {\n    return function (err, data) {\n      if (err) {\n        cb(err, data)\n      } else {\n        cb(err, Object.keys(data).map(function (key) {\n          return data[key]\n        }))\n      }\n    }\n  }\n\n  var storage = {\n    teams: {\n      get: function (team_id, cb) {\n        teams_db.get(team_id, cb)\n      },\n      save: function (team_data, cb) {\n        teams_db.save(team_data.id, team_data, cb)\n      },\n      delete: function (team_id, cb) {\n        teams_db.delete(team_id.id, cb)\n      },\n      all: function (cb) {\n        teams_db.all(objectsToList(cb))\n      }\n    },\n    users: {\n      get: function (user_id, cb) {\n        users_db.get(user_id, cb)\n      },\n      save: function (user, cb) {\n        users_db.save(user.id, user, cb)\n      },\n      delete: function (user_id, cb) {\n        users_db.delete(user_id.id, cb)\n      },\n      all: function (cb) {\n        users_db.all(objectsToList(cb))\n      }\n    },\n    channels: {\n      get: function (channel_id, cb) {\n        channels_db.get(channel_id, cb)\n      },\n      save: function (channel, cb) {\n        channels_db.save(channel.id, channel, cb)\n      },\n      delete: function (channel_id, cb) {\n        channels_db.delete(channel_id.id, cb)\n      },\n      all: function (cb) {\n        channels_db.all(objectsToList(cb))\n      }\n    }\n  }\n\n  return storage\n}\n"]}