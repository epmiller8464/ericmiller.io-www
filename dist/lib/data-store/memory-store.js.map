{"version":3,"sources":["../../../lib/data-store/memory-store.js"],"names":["module","exports","name","options","db","require","encoding","valueEncoding","MEM_STORE","put","key","value","cb","err","console","error","get","del","createReadStream","keys","values"],"mappings":"AAAA;;AAEAA,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAA8B;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC7C,MAAMC,KAAKC,QAAQ,MAAR,EAAgBH,IAAhB,CAAX;AACA,MAAII,WAAW,EAACC,eAAeJ,QAAQG,QAAR,IAAoB,MAApC,EAAf;AACA,MAAME,YAAY;AAChBC,OADgB,eACXC,GADW,EACNC,KADM,EACCC,EADD,EACK;AACnBR,SAAGK,GAAH,CAAOC,GAAP,EAAYC,KAAZ,EAAmBL,QAAnB,EAA6B,UAAUO,GAAV,EAAe;;AAE1C,YAAIA,GAAJ,EAAS;AACPC,kBAAQC,KAAR,CAAcF,GAAd;AACA,iBAAOD,GAAGC,GAAH,CAAP;AACD;AACD,eAAOD,GAAG,IAAH,EAAS,IAAT,CAAP;AACD,OAPD;AAQD,KAVe;AAWhBI,OAXgB,eAWXN,GAXW,EAWNE,EAXM,EAWF;AACZR,SAAGY,GAAH,CAAON,GAAP,EAAYJ,QAAZ,EAAsB,UAAUO,GAAV,EAAeF,KAAf,EAAsB;;AAE1C,YAAIE,GAAJ,EAAS;AACPC,kBAAQC,KAAR,CAAcF,GAAd;AACA,iBAAOD,GAAGC,GAAH,CAAP;AACD;AACD,eAAOD,GAAG,IAAH,EAASD,KAAT,CAAP;AACD,OAPD;AAQD,KApBe;AAqBhBM,OArBgB,eAqBXP,GArBW,EAqBNE,EArBM,EAqBF;AACZR,SAAGa,GAAH,CAAOP,GAAP,EAAY,UAAUG,GAAV,EAAe;;AAEzB,YAAIA,GAAJ,EAAS;AACPC,kBAAQC,KAAR,CAAcF,GAAd;AACA,iBAAOD,GAAGC,GAAH,CAAP;AACD;AACD,eAAOD,GAAG,IAAH,EAAS,IAAT,CAAP;AACD,OAPD;AAQD,KA9Be;AA+BhBM,oBA/BgB,kCA+BkB;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,MAAS,QAATA,MAAS;;AAChC,aAAOhB,GAAGc,gBAAH,CAAoB,EAACC,UAAD,EAAOC,cAAP,EAApB,CAAP;AACD;AAjCe,GAAlB;AAmCA,SAAOZ,SAAP;AACD,CAvCD","file":"memory-store.js","sourcesContent":["'use strict'\n\nmodule.exports = function (name, options = {}) {\n  const db = require('./db')(name)\n  let encoding = {valueEncoding: options.encoding || 'json'}\n  const MEM_STORE = {\n    put (key, value, cb) {\n      db.put(key, value, encoding, function (err) {\n\n        if (err) {\n          console.error(err)\n          return cb(err)\n        }\n        return cb(null, true)\n      })\n    },\n    get (key, cb) {\n      db.get(key, encoding, function (err, value) {\n\n        if (err) {\n          console.error(err)\n          return cb(err)\n        }\n        return cb(null, value)\n      })\n    },\n    del (key, cb) {\n      db.del(key, function (err) {\n\n        if (err) {\n          console.error(err)\n          return cb(err)\n        }\n        return cb(null, true)\n      })\n    },\n    createReadStream ({keys, values}) {\n      return db.createReadStream({keys, values})\n    }\n  }\n  return MEM_STORE\n}\n"]}