{"version":3,"sources":["../../lib/storageService.js"],"names":["AWS","require","fs","path","config","s3","S3","apiVersion","upload","file","metaData","cb","filepath","search","join","process","env","PWD","parsedPath","parse","fileStream","createReadStream","on","err","console","log","key","base","uploadParams","Bucket","audio_bucket","Key","Body","Metadata","data","Location","list","params","AWS_AUDIO_BUCKET","listObjectsV2","stack","Service","module","exports"],"mappings":"AAAA;AACA;AACA;;AACA,IAAIA,MAAMC,QAAQ,SAAR,CAAV;AACA,IAAIC,KAAKD,QAAQ,IAAR,CAAT;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;AACA,IAAIG,SAASH,QAAQ,WAAR,CAAb;AACA;AACA;AACA,IAAMI,KAAK,IAAIL,IAAIM,EAAR,CAAW,EAACC,YAAY,YAAb,EAAX,CAAX;;AAEA;AACA,SAASC,MAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,EAAjC,EAAqC;AACnC,MAAIC,WAAWH,KAAKI,MAAL,CAAY,SAAZ,KAA0B,CAA1B,GAA8BJ,IAA9B,GAAqCN,KAAKW,IAAL,CAAUC,QAAQC,GAAR,CAAYC,GAAtB,EAA2B,WAA3B,EAAwCR,IAAxC,CAApD;;AAEA,MAAIS,aAAaf,KAAKgB,KAAL,CAAWP,QAAX,CAAjB;;AAEA,MAAIQ,aAAalB,GAAGmB,gBAAH,CAAoBT,QAApB,CAAjB;;AAEAQ,aAAWE,EAAX,CAAc,OAAd,EAAuB,UAAUC,GAAV,EAAe;AACpCC,YAAQC,GAAR,CAAY,YAAZ,EAA0BF,GAA1B;AACA,WAAOZ,GAAGY,GAAH,CAAP;AACD,GAHD;AAIA,MAAIG,MAAMR,WAAWS,IAArB,CAXmC,CAWV;AACzB,MAAMC,eAAe;AACnBC,YAAQzB,OAAO0B,YAAP,GAAsB,iBADX;AAEnBC,SAAKL,GAFc;AAGnBM,UAAMZ,UAHa;AAInBa,cAAUvB;AAJS,GAArB;AAMF;AACEL,KAAGG,MAAH,CAAUoB,YAAV,EAAwB,UAAUL,GAAV,EAAeW,IAAf,EAAqB;AAC3C,QAAIX,GAAJ,EAAS;AACPC,cAAQC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACA,aAAOZ,GAAGY,GAAH,CAAP;AACD;AACD,QAAIW,IAAJ,EAAU;AACRV,cAAQC,GAAR,CAAY,gBAAZ,EAA8BS,KAAKC,QAAnC;AACA,aAAOxB,GAAG,IAAH,EAASuB,IAAT,CAAP;AACD;AACF,GATD;AAUD;;AAED,SAASE,IAAT,CAAezB,EAAf,EAAmB;AACjB,MAAI0B,SAAS;AACXR,YAAQd,QAAQC,GAAR,CAAYsB;AACpB;AAFW,GAAb;AAIAjC,KAAGkC,aAAH,CAAiBF,MAAjB,EAAyB,UAAUd,GAAV,EAAeW,IAAf,EAAqB;AAC5C,QAAIX,GAAJ,EAAS;AACPC,cAAQC,GAAR,CAAYF,GAAZ,EAAiBA,IAAIiB,KAArB;AACA,aAAO7B,GAAGY,GAAH,EAAQ,IAAR,CAAP;AACD,KAHD,CAGE;AAHF,SAIK;AACHC,gBAAQC,GAAR,CAAYS,IAAZ;AACA,eAAOvB,GAAG,IAAH,EAASuB,IAAT,CAAP;AACD;AACF,GATD;AAUD;;AAED,IAAMO,UAAU;AACdzC,OAAK;AACHQ,kBADG;AAEH4B;AAFG;AADS,CAAhB;AAMAM,OAAOC,OAAP,GAAiB,EAACF,gBAAD,EAAjB","file":"storageService.js","sourcesContent":["'use strict'\n// Load the AWS SDK for Node.js\n// require('dotenv').config()\nlet AWS = require('aws-sdk')\nlet fs = require('fs')\nlet path = require('path')\nlet config = require('../config')\n// Create S3 service object\n// const ep = new AWS.Endpoint('ericmiller.io-audio.s3.amazonaws.com')\nconst s3 = new AWS.S3({apiVersion: '2006-03-01'})\n\n// call S3 to retrieve upload file to specified bucket\nfunction upload (file, metaData, cb) {\n  let filepath = file.search('uploads') >= 0 ? file : path.join(process.env.PWD, '/uploads/', file)\n\n  let parsedPath = path.parse(filepath)\n\n  var fileStream = fs.createReadStream(filepath)\n\n  fileStream.on('error', function (err) {\n    console.log('File Error', err)\n    return cb(err)\n  })\n  let key = parsedPath.base// path.basename(parsedPath.name)\n  const uploadParams = {\n    Bucket: config.audio_bucket + '/voice-messages',\n    Key: key,\n    Body: fileStream,\n    Metadata: metaData\n  }\n// call S3 to retrieve upload file to specified bucket\n  s3.upload(uploadParams, function (err, data) {\n    if (err) {\n      console.log('Error', err)\n      return cb(err)\n    }\n    if (data) {\n      console.log('Upload Success', data.Location)\n      return cb(null, data)\n    }\n  })\n}\n\nfunction list (cb) {\n  var params = {\n    Bucket: process.env.AWS_AUDIO_BUCKET\n    // MaxKeys: 2\n  }\n  s3.listObjectsV2(params, function (err, data) {\n    if (err) {\n      console.log(err, err.stack)\n      return cb(err, null)\n    } // an error occurred\n    else {\n      console.log(data)\n      return cb(null, data)\n    }\n  })\n}\n\nconst Service = {\n  AWS: {\n    upload,\n    list\n  }\n}\nmodule.exports = {Service}\n"]}