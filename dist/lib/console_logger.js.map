{"version":3,"sources":["../../lib/console_logger.js"],"names":["slice","Array","prototype","levels","levelsByName","reduce","out","name","index","normalizeLogLevel","level","length","ConsoleLogger","_console","maxLevel","defaultLevel","console","log","message","normalizedLevel","levelName","apply","concat","call","arguments","LogLevels","module","exports"],"mappings":";;AAAA,IAAIA,QAAQC,MAAMC,SAAN,CAAgBF,KAA5B;AACA;;;;AAIA,IAAIG,SAAS,CACX,WADW,EAEX,OAFW,EAGX,UAHW,EAIX,OAJW,EAKX,SALW,EAMX,QANW,EAOX,MAPW,EAQX,OARW,CAAb;AAUA,IAAIC,eAAeD,OAAOE,MAAP,CAAc,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAC3DF,MAAIC,IAAJ,IAAYC,KAAZ;AACA,SAAOF,GAAP;AACD,CAHkB,EAGhB,EAHgB,CAAnB;;AAKA,SAASG,iBAAT,CAA4BC,KAA5B,EAAmC;AACjC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,YAAQN,aAAaM,KAAb,CAAR;AACD;AACD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,SAAS,CAAtC,IAA2CA,QAAQP,OAAOQ,MAA9D,EAAsE;AACpE,WAAOD,KAAP;AACD;AACD,SAAO,KAAP;AACD;;AAED,SAASE,aAAT,CAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,YAA5C,EAA0D;AACxDF,aAAWA,YAAYG,OAAvB;AACAF,aAAWL,kBAAkBK,QAAlB,KAA+B,CAA1C;AACAC,iBAAeN,kBAAkBM,YAAlB,KAAmC,CAAlD;AACA,SAAO;AACLE,SAAK,aAAUP,KAAV,EAAiBQ,OAAjB,EAA0B;AAC7B,UAAIC,kBAAkBV,kBAAkBC,KAAlB,CAAtB;AACA,UAAI,CAACS,eAAL,EAAsB;AACpBD,kBAAUR,KAAV;AACAS,0BAAkBJ,YAAlB;AACD;AACD,UAAIK,YAAYjB,OAAOgB,eAAP,CAAhB;AACA,UAAIA,mBAAmBL,QAAvB,EAAiC;AAC/BD,iBAASI,GAAT,CAAaI,KAAb,CACER,QADF,EAEE,CAACO,YAAY,IAAZ,GAAmBF,OAApB,EAA6BI,MAA7B,CAAoCtB,MAAMuB,IAAN,CAAWC,SAAX,EAAsB,CAAtB,CAApC,CAFF;AAID;AACF;AAdI,GAAP;AAgBD;;AAEDZ,cAAca,SAAd,GAA0BrB,YAA1B;;AAEAsB,OAAOC,OAAP,GAAiBf,aAAjB","file":"console_logger.js","sourcesContent":["var slice = Array.prototype.slice\n/**\n * RFC 5424 syslog severity levels, see\n * https://tools.ietf.org/html/rfc5424#section-6.2.1\n */\nvar levels = [\n  'emergency',\n  'alert',\n  'critical',\n  'error',\n  'warning',\n  'notice',\n  'info',\n  'debug'\n]\nvar levelsByName = levels.reduce(function (out, name, index) {\n  out[name] = index\n  return out\n}, {})\n\nfunction normalizeLogLevel (level) {\n  if (typeof level === 'string') {\n    level = levelsByName[level]\n  }\n  if (typeof level === 'number' && level >= 0 && level < levels.length) {\n    return level\n  }\n  return false\n}\n\nfunction ConsoleLogger (_console, maxLevel, defaultLevel) {\n  _console = _console || console\n  maxLevel = normalizeLogLevel(maxLevel) || 6\n  defaultLevel = normalizeLogLevel(defaultLevel) || 6\n  return {\n    log: function (level, message) {\n      var normalizedLevel = normalizeLogLevel(level)\n      if (!normalizedLevel) {\n        message = level\n        normalizedLevel = defaultLevel\n      }\n      var levelName = levels[normalizedLevel]\n      if (normalizedLevel <= maxLevel) {\n        _console.log.apply(\n          _console,\n          [levelName + ': ' + message].concat(slice.call(arguments, 2))\n        )\n      }\n    }\n  }\n}\n\nConsoleLogger.LogLevels = levelsByName\n\nmodule.exports = ConsoleLogger\n"]}