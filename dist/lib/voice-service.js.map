{"version":3,"sources":["../../lib/voice-service.js"],"names":["client","require","process","env","TWILIO_SID","TWILIO_AUTH_TOKEN","_","fetchCalls","calls","each","call","rt","fetchTranscribedRecordings","sid","push","fetchIncomingCall","cid","cb","from","recordings","api","fetch","then","c","rtcs","transcribe","x","page","r","ts","instances","onboardNewCallData","callLog","notifyMe","to","notifyServer","pushNotify","updateCallLog","sendSmsNotifications","message","messages","create","body","TWILIO_NUMBER","data","console","log","catch","err","error","module","exports"],"mappings":"AAAA;;AACA,IAAMA,SAASC,QAAQ,QAAR,EAAkBC,QAAQC,GAAR,CAAYC,UAA9B,EAA0CF,QAAQC,GAAR,CAAYE,iBAAtD,CAAf;AACA,IAAMC,IAAIL,QAAQ,QAAR,CAAV;;AAEA;;AAEA,SAASM,UAAT,GAAuB;AACrB;AACA,MAAIC,QAAQ,EAAZ;AACAR,SAAOQ,KAAP,CAAaC,IAAb,CAAkB,UAACC,IAAD,EAAU;AAC1B,QAAIC,KAAKC,2BAA2BF,KAAKG,GAAhC,CAAT;AACAL,UAAMM,IAAN,CAAWH,EAAX;AACD,GAHD;AAIA,SAAOH,KAAP;AACD;;AAED,SAASO,iBAAT,CAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACnC,MAAIP,OAAO;AACTA,UAAM,EADG;AAETQ,UAAM,EAFG;AAGTC,gBAAY;AAHH,GAAX;AAKAnB,SAAOoB,GAAP,CAAWZ,KAAX,CAAiBQ,GAAjB,EAAsBK,KAAtB,GACCC,IADD,CACM,UAACC,CAAD,EAAO;;AAEX,WAAON,GAAG;AACRP,YAAMa,CADE;AAERC,YAAMZ,2BAA2BW,EAAEV,GAA7B;AAFE,KAAH,CAAP;AAID,GAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,SAASD,0BAAT,CAAqCI,GAArC,EAAiE;AAAA,MAAvBS,UAAuB,uEAAV,IAAU;AAAA,MAAJR,EAAI;;AAC/D;AACA;AACA,MAAIS,IAAI,EAAR;AACA1B,SAAOoB,GAAP,CAAWZ,KAAX,CAAiBQ,GAAjB,EAAsBG,UAAtB,CAAiCQ,IAAjC,CAAsC,UAACA,IAAD,EAAU;AAC9C,QAAIC,IAAI,EAAR;AACA,QAAIC,KAAK,EAAT;AACA;AACA,WAAOZ,GAAGU,KAAKG,SAAR,CAAP;AACD,GALD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,SAASC,kBAAT,CAA6BC,OAA7B,EAAsC,CAErC;;AAED,SAASC,QAAT,CAAmBC,EAAnB,EAAuBhB,IAAvB,EAA6B,CAAE;;AAE/B,SAASiB,YAAT,CAAuBD,EAAvB,EAA2BhB,IAA3B,EAAiC,CAAE;;AAEnC,SAASkB,UAAT,GAAuB,CAAE;;AAEzB,SAASC,aAAT,GAA0B,CAAE;;AAE5B,SAASC,oBAAT,GAAkE;AAAA,MAAnCC,OAAmC,uEAAzB,mBAAyB;AAAA,MAAJL,EAAI;;AAChE,SAAOlC,OAAOoB,GAAP,CAAWoB,QAAX,CAAoBC,MAApB,CAA2B;AAChCC,UAAMH,OAD0B;AAEhCL,QAAIA,EAF4B;AAGhChB,UAAMhB,QAAQC,GAAR,CAAYwC;AAHc,GAA3B,EAIJrB,IAJI,CAIC,UAAUsB,IAAV,EAAgB;AACtBC,YAAQC,GAAR,CAAY,kBAAZ;AACD,GANM,EAMJC,KANI,CAME,UAAUC,GAAV,EAAe;AACtBH,YAAQI,KAAR,CAAc,8BAAd;AACAJ,YAAQI,KAAR,CAAcD,GAAd;AACD,GATM,CAAP;AAUD;;AAEDE,OAAOC,OAAP,GAAiB;AACfpB,wCADe;AAEfxB,wBAFe;AAGfK,wDAHe;AAIf0B,4CAJe;AAKfH,4BALe;AAMfC,wBANe;AAOfC;AAPe,CAAjB","file":"voice-service.js","sourcesContent":["'use strict'\nconst client = require('twilio')(process.env.TWILIO_SID, process.env.TWILIO_AUTH_TOKEN)\nconst _ = require('lodash')\n\n// const {MessagingResponse, VoiceResponse} = require('twilio').Re\n\nfunction fetchCalls () {\n  //  client.recordings.each(recording => console.log(recording.duration));\n  let calls = []\n  client.calls.each((call) => {\n    let rt = fetchTranscribedRecordings(call.sid)\n    calls.push(rt)\n  })\n  return calls\n}\n\nfunction fetchIncomingCall (cid, cb) {\n  let call = {\n    call: {},\n    from: '',\n    recordings: []\n  }\n  client.api.calls(cid).fetch()\n  .then((c) => {\n\n    return cb({\n      call: c,\n      rtcs: fetchTranscribedRecordings(c.sid)\n    })\n  })\n  // .then((c)=>{\n  //   c.recordings.each(r=> r.transcriptions.each(t=>)\n  // })\n  // client.calls('CA062ccb1bbd7ffc5799f79bf46eef06f0').fetch()\n  // .then((c) => {\n  //   call.call = c\n  // })\n  //\n  // client\n  // .calls(cid)\n  // .fetch()\n  // .then(call => console.log(call.to))\n  // client.calls.get(cid).each((call) => {\n  //   let rt = fetchTranscribedRecordings(call.sid)\n  //   calls.push(rt)\n  // })\n  // return calls\n}\n\nfunction fetchTranscribedRecordings (cid, transcribe = true, cb) {\n  // client.recordings.each(recording => console.log(recording.duration));\n  // client.calls(cid).recordings.each(recording => recording.transcriptions().get()))\n  let x = []\n  client.api.calls(cid).recordings.page((page) => {\n    let r = {}\n    let ts = []\n    // recording.transcriptions.each(t => ts.push(t.transcriptionText))\n    return cb(page.instances)\n  })\n  // let map = {\n  //   cid: cid,\n  //   from: '',\n  //   recordings: []\n  // }\n  //\n  // client.recordings.each({callSid: cid}, (r) => {\n  //   let n = {rid: r.sid, duration: r.duration, uri: r.uri, transcriptions: []}\n  //   if (transcribe)\n  //     r.transcriptions.each(t => n.transcriptions.push({sid: t.sid, uri: t.uri, text: t.transcriptionText}))\n  //   map.recordings.push(n)\n  // })\n  //\n  // return map\n}\n\nfunction onboardNewCallData (callLog) {\n\n}\n\nfunction notifyMe (to, from) {}\n\nfunction notifyServer (to, from) {}\n\nfunction pushNotify () {}\n\nfunction updateCallLog () {}\n\nfunction sendSmsNotifications (message = 'Be a good person!', to) {\n  return client.api.messages.create({\n    body: message,\n    to: to,\n    from: process.env.TWILIO_NUMBER\n  }).then(function (data) {\n    console.log('Persons notified')\n  }).catch(function (err) {\n    console.error('Could not notify these fools')\n    console.error(err)\n  })\n}\n\nmodule.exports = {\n  onboardNewCallData,\n  fetchCalls,\n  fetchTranscribedRecordings,\n  sendSmsNotifications,\n  notifyServer,\n  pushNotify,\n  updateCallLog\n}"]}