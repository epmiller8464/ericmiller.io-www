{"version":3,"sources":["../../bin/www"],"names":["process","env","NODE_ENV","app","require","debug","http","port","normalizePort","PORT","set","server","createServer","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":";;AACAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuBF,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA/C;AACA,IAAIF,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C,CAC3C;AACD;AACA;;;;AAIA,IAAIC,MAAMC,QAAQ,QAAR,CAAV;AACA,IAAIC,QAAQD,QAAQ,OAAR,EAAiB,0BAAjB,CAAZ;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAEA;;;;AAIA,IAAIG,OAAOC,cAAcR,QAAQC,GAAR,CAAYQ,IAAZ,IAAoB,MAAlC,CAAX;AACAN,IAAIO,GAAJ,CAAQ,MAAR,EAAgBH,IAAhB;;AAEA;;;;AAIA,IAAII,SAASL,KAAKM,YAAL,CAAkBT,GAAlB,CAAb;AACAC,QAAQ,cAAR,EAAwBO,MAAxB;;AAEA;;;;AAIAA,OAAOE,MAAP,CAAcN,IAAd;AACAI,OAAOG,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAJ,OAAOG,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASR,aAAT,CAAwBS,GAAxB,EAA6B;AAC3B,MAAIV,OAAOW,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMZ,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOU,GAAP;AACD;;AAED,MAAIV,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASQ,OAAT,CAAkBK,KAAlB,EAAyB;AACvB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,OAAO,OAAOf,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,UAAQa,MAAMG,IAAd;AACE,SAAK,QAAL;AACEC,cAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACAtB,cAAQyB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACAtB,cAAQyB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASJ,WAAT,GAAwB;AACtB,MAAIU,OAAOf,OAAOgB,OAAP,EAAX;AACA,MAAIL,OAAO,OAAOI,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAKnB,IAFnB;AAGAF,QAAM,kBAAkBiB,IAAxB;AACD","file":"www.js","sourcesContent":["\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development'\nif (process.env.NODE_ENV === 'development') {\n}\n// require('dotenv').config()\n/**\n * Module dependencies.\n */\n\nvar app = require('../app')\nvar debug = require('debug')('ericmiller.io-www:server')\nvar http = require('http')\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3001')\napp.set('port', port)\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app)\nrequire('../socket.io')(server)\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port)\nserver.on('error', onError)\nserver.on('listening', onListening)\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort (val) {\n  var port = parseInt(val, 10)\n\n  if (isNaN(port)) {\n    // named pipe\n    return val\n  }\n\n  if (port >= 0) {\n    // port number\n    return port\n  }\n\n  return false\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError (error) {\n  if (error.syscall !== 'listen') {\n    throw error\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n      break\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n      break\n    default:\n      throw error\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening () {\n  var addr = server.address()\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port\n  debug('Listening on ' + bind)\n}\n"]}