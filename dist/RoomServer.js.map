{"version":3,"sources":["../roomserver.js"],"names":["uuid","require","pino","db","Room","User","noop","rooms","io","createServer","http","emitter","opts","transports","log","origins","on","socket","info","id","data","getRoom","channel","err","room","createChannel","newRoom","error","emit","user","username","peers","broadcaster","Object","keys","length","channelIsReady","saveRoom","r","roomId","cb","nsp","of","join","toString","to","msg","console","broadcast","e","replace","get","JSON","parse","put","valueEncoding","getStats","presence","disconnect","onPut","key","value","joinChannel","self","Error","send","module","exports"],"mappings":"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","file":"roomserver.js","sourcesContent":["/*\n\n */\nvar uuid = require('uuid')\nvar pino = require('pino')()\nvar db = require('./db')\nvar Room = require('./lib/room')\nvar User = require('./lib/user')\n\nvar noop = function () {\n}\nvar rooms = {}\nvar io;\nvar createServer = function (http, emitter) {\n\n    var opts = {\n        transports: [\n            'polling',\n            'websocket',\n            'xhr-polling',\n            'jsonp-polling'\n        ],\n        log: false,\n        origins: '*:*'\n    }// 'disconnect' EVENT will work only with 'websocket\n    io = require('socket.io')(http, opts)\n\n    io.on('connection', function (socket) {\n        pino.info('a user connected %s', socket.id);\n        socket.on('create-join-channel', function (data) {\n\n            getRoom(data.channel, function (err, room) {\n\n                if(err || !room) {\n\n                    createChannel(data, function (err, newRoom) {\n\n                        if(err) {\n                            pino.error(err)\n                        }\n                        socket.emit('%s created', room.channel)\n                    })\n                } else {\n                    var user = new User({\n                        id: socket.id,\n                        username: data.username\n                        //socket: socket\n                    })\n\n                    if(!room.peers) {\n                        room.peers = {}\n                    }\n\n                    if(!room.broadcaster) {\n\n                        room.broadcaster = user.id\n                    }\n\n                    room.peers[user.id] = user\n\n                    if(Object.keys(room.peers).length === 2) {\n\n                        room.channelIsReady = true\n\n                        //nsp.to(room.initiator).emit('start-signaling')\n                    }\n\n                    if(Object.keys(room.peers).length > 1) {\n                        //nsp.to(data.id).emit('start-signaling')\n                    }\n\n                    //process.nextTick(function (r) {\n                    saveRoom(r)\n                    //})\n\n\n                }\n            })\n        })\n\n        socket.on('disconnect', function () {\n\n            //room.nsp.emit('leaving')\n            //\n        })\n    })\n\n    //db.on('put', onPut)\n\n\n    emitter.on('new-room', function (roomId) {\n\n        if(roomId) {\n            pino.info('new-room event -> %s ', roomId)\n            var data = {channel: roomId}\n            getRoom(data.channel, function (err, room) {\n\n                if(err || !(room)) {\n\n                    createChannel({channel: roomId}, function (err, room) {\n\n                        //if(!err && room) {\n                        //    io.to(room.channel).emit('channel-created')\n                        //\n                        //}\n                    })\n                } else {\n                    //io.to(room.channel).emit('channel-created')\n                    //var peerMap = Object.keys(room.peers).map(function (key) {\n                    //    return room.peers[key]\n                    //});\n\n                    //\n                    //io.to(data.channel).emit('channel-joined', {\n                    //    broadcasting: room.channelIsReady,\n                    //    peers: peerMap\n                    //})\n                    //var nsp = io.nsps[room.channel]\n                    //getRoom(socket.nsp.name, function (err, r) {\n                    //\n                    //    if(r) {\n                    //        var peers = r.peers\n                    //        //nsp.emit('message', data)\n                    //        for(var peerId in peers) {\n                    //            var peer = peers[peerId]\n                    //            if(peer.id !== socket.id) {\n                    //                //io.to(peerId).emit('message', data)\n                    //                socket.broadcast.to(peer.id).emit('peer-answer', data)\n                    //            }\n                    //        }\n                    //    }\n                    //})\n                }\n            });\n        }\n    })\n}\n\n\n\nfunction createChannel(data, cb) {\n\n  cb = cb || noop\n\n  var room = new Room({\n    id: data.channel,\n    channel: data.channel,\n    peers: null,\n    broadcaster: null,\n    channelIsReady: false\n  })\n\n\n  saveRoom(room, function (err, room) {\n    pino.info('room %s created', room.channel)\n    var nsp = io.of('/' + data.channel)\n    nsp.on('connection', function (socket) {\n      pino.info('new connection in room: %s ', room.channel)\n\n      socket.join(room.channel);\n\n      //socket.on('join-channel', function (data) {\n      //\n      //    getRoom(data.channel, function (err, r) {\n      //\n      //        if(!r.peers) {\n      //            r.peers = {}\n      //            //io.to(r.channel).emit('channel-created')\n      //            nsp.emit('channel-created')\n      //\n      //\n      //        }\n      //\n      //        var user = new User({\n      //            id: socket.id,\n      //            username: data.username\n      //        })\n      //\n      //        if(!r.initiator) {\n      //            r.initiator = user.id.toString()\n      //        }\n      //\n      //        r.peers[user.username] = user\n      //\n      //        if(Object.keys(r.peers).length > 1) {\n      //\n      //            r.channelIsReady = true\n      //            //io.to(r.initiator).emit('channel-ready')\n      //            socket.broadcast.to(r.channel).emit('channel-ready')\n      //        }\n      //\n      //        //process.nextTick(function (r) {\n      //        saveRoom(r)\n      //        //})\n      //\n      //        if(r.channelIsReady) {\n      //            var peerMap = Object.keys(r.peers).map(function (key) {\n      //                return r.peers[key]\n      //            });\n      //\n      //            //socket.broadcast.to(r.initiator).emit('channel-joined', {\n      //            nsp.emit('channel-joined', {\n      //                peerId: user.id,\n      //                broadcasting: r.channelIsReady,\n      //                broadcaster: r.initiator,\n      //                peers: peerMap\n      //            })\n      //        }\n      //    })\n      //});\n\n      socket.on('join-broadcast', function (data) {\n        var user;\n        getRoom(data.channel, function (err, r) {\n\n          if(!r.peers) {\n            r.peers = {}\n          }\n\n          if(r.peers[data.id]) {\n            user = r.peers[data.id]\n          } else {\n            user = new User({\n              id: socket.id,\n              username: data.username,\n              channel: data.channel\n            })\n          }\n\n          if(!r.broadcaster) {\n            r.broadcaster = user.id.toString()\n            user.broadcaster = true\n          }\n          r.peers[user.id] = user\n\n\n          if(user.broadcaster) {\n            socket.emit('start-broadcasting');\n          } else {\n            //socket.emit('join-broadcast', user);\n            nsp.to(r.broadcaster).emit('call-peer', user)\n            nsp.to(user.id).emit('join-broadcast', {broadcaster: r.broadcaster});\n\n\n          }\n          saveRoom(r)\n        })\n      });\n\n      socket.on('message', function (msg) {\n        console.log('incoming msg %s', msg)\n        if(msg.to) {\n          nsp.to(msg.to).emit('message', msg)\n\n        } else {\n\n          socket.broadcast.emit('message', msg);\n        }\n      });\n\n      //socket.on('peer-offer', function (data) {\n      //    console.log('peer-data', data.data)\n      //    getRoom(socket.nsp.name, function (err, r) {\n      //\n      //        if(r) {\n      //            var peers = r.peers\n      //            //nsp.emit('message', data)\n      //            for(var peerId in peers) {\n      //                var peer = peers[peerId]\n      //                if(peer.id !== socket.id) {\n      //                    //io.to(peerId).emit('message', data)\n      //                    socket.broadcast.to(peer.id).emit('peer-offer', data)\n      //                }\n      //            }\n      //        }\n      //    })\n      //})\n      //\n      //socket.on('peer-answer', function (data) {\n      //    console.log('peer-data', data.data)\n      //    getRoom(socket.nsp.name, function (err, r) {\n      //\n      //        if(r) {\n      //            var peers = r.peers\n      //            //nsp.emit('message', data)\n      //            for(var peerId in peers) {\n      //                var peer = peers[peerId]\n      //                if(peer.id !== socket.id) {\n      //                    //io.to(peerId).emit('message', data)\n      //                    socket.broadcast.to(peer.id).emit('peer-answer', data)\n      //                }\n      //            }\n      //        }\n      //    })\n      //})\n      //\n      //socket.on('start-signaling', function (data) {\n      //    //console.log('peer-data', data.data)\n      //    getRoom(socket.nsp.name, function (err, r) {\n      //\n      //        if(r) {\n      //            var peers = r.peers\n      //            //nsp.emit('message', data)\n      //            for(var peerId in peers) {\n      //                var peer = peers[peerId]\n      //                if(peer.id !== socket.id) {\n      //                    //io.to(peerId).emit('message', data)\n      //                    socket.broadcast.to(peer.id).emit('start-signaling', data)\n      //                }\n      //            }\n      //        }\n      //    })\n      //})\n      //\n      //socket.on('peer-ice', function (data) {\n      //    console.log('peer-ice', data.data)\n      //    getRoom(socket.nsp.name, function (err, r) {\n      //\n      //        if(r) {\n      //            var peers = r.peers\n      //            //nsp.emit('message', data)\n      //            for(var peerId in peers) {\n      //                var peer = peers[peerId]\n      //                if(peer.id !== socket.id) {\n      //                    //io.to(peerId).emit('message', data)\n      //                    socket.broadcast.to(peer.id).emit('peer-ice', data)\n      //                }\n      //            }\n      //        }\n      //\n      //    })\n      //})\n      //\n      //socket.on('waiting-for-peers', function (data) {\n      //    console.log('peer-ice', data.data)\n      //    getRoom(socket.nsp.name, function (err, r) {\n      //\n      //        if(r) {\n      //\n      //        }\n      //\n      //    })\n      //})\n\n      socket.on('disconnect', function (e) {\n\n        if(e) {\n          console.log('opps RoomServer encountered an error: %s', e)\n        }\n      })\n\n      socket.on('error', function (e) {\n\n        if(e) {\n          console.log('opps RoomServer encountered an error: %s', e)\n        }\n      })\n    });\n  })\n}\n\n\nfunction getRoom(roomId, cb) {\n  cb = cb || noop\n\n  if(!(roomId) || roomId.toString().length == 0)\n    cb(null, null)\n  roomId = roomId.replace('/', '')\n  db.get(roomId, function (err, r) {\n    var room = r ? JSON.parse(r) : null\n    return cb(err, room);\n  })\n}\n\nfunction saveRoom(room, cb) {\n  cb = cb || noop\n  db.put(room.channel, room, {valueEncoding: 'json'}, function (err) {\n\n    return cb(err, room);\n  })\n}\n\nfunction getStats() {\n\n}\n\nfunction presence() {\n\n}\n\nfunction disconnect() {\n\n}\n\nfunction onPut(key, value) {\n\n  pino.info('put event -> %s : %s', key, value)\n  createChannel({channel: key})\n}\n\nfunction joinChannel(data, socket, cb) {\n  var self = this\n  db.get(self.channel, function (err, room) {\n\n    if(err)return cb(err, null)\n    if(!room)return cb(new Error('couldnt find your channel'), null)\n\n\n    if(room) {\n      var user = new User({\n        id: socket.id,\n        username: username\n        //socket:socket,\n      })\n\n      if(!room.peers) {\n        room.peers = {}\n      }\n\n      if(!room.broadcaster)\n        room.broadcaster = user.id\n      room.peers[user.id] = user\n      db.put(room.channel, room, function (err) {\n        return cb(err, room)\n      })\n    }\n\n  })\n}\n\nfunction send(channel, username, socket, cb) {\n\n  db.get(channel, function (err, room) {\n\n    if(err)return cb(err, null)\n    if(!room)return cb(new Error('couldnt find your channel'), null)\n\n    if(room) {\n      var user = new User({\n        id: socket.id,\n        username: username\n        //socket:socket,\n      })\n\n      if(!room.peers) {\n        room.peers = {}\n      }\n\n      if(!room.broadcaster)\n        room.broadcaster = user.id\n      room.peers[user.id] = user\n            db.put(room.channel, room, function (err) {\n                return cb(err, room)\n            })\n        }\n\n    })\n}\n\n\nmodule.exports = createServer\n"]}