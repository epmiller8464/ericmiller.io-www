{"version":3,"sources":["../../routes/voice-mail.js"],"names":["express","require","router","Router","VoiceMessage","createSignedUrl","nets","get","req","res","next","links","find","isTemp","err","docs","render","title","images","map","vm","toObject","waveForm","key","push","filter","i","v","reverse","surl","meta","Key","_id","image","audio_path","join","site_key","process","env","RECAPTCHA_SITE_KEY","post","body","response","remoteip","ip","email","status","json","error","validateSubmitter","result","delete","fileName","recaptcha","cb","url","RECAPTCHA_SECRET","request","method","encoding","undefined","JSON","parse","module","exports"],"mappings":"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","file":"voice-mail.js","sourcesContent":["'use strict'\nvar express = require('express')\nvar router = express.Router()\nconst {VoiceMessage} = require('../lib/model')\nconst {createSignedUrl} = require('../lib/authorization')\nconst nets = require('nets')\nrouter.get('/', function (req, res, next) {\n  let links = []\n  VoiceMessage.find({isTemp: false}, (err, docs) => {\n    // let value = JSON.parse(data.value)\n    if (err) res.render('voice-mail', {title: 'Express', images: []})\n    links = docs.map((vm) => {return vm.toObject()}).map((vm) => {\n      let waveForm = []\n      for (var key in vm.waveForm) {\n        if (vm.waveForm[key])\n          waveForm.push(vm.waveForm[key])\n      }\n      waveForm = waveForm.filter((i, v) => {if (v) return v }).reverse()\n      let surl = createSignedUrl(vm.meta.Key)\n      return {key: vm._id, image: vm.image, audio_path: surl, waveForm: waveForm.join(',')}\n    })\n    res.render('voice-mail', {title: 'Express', images: links, site_key: process.env.RECAPTCHA_SITE_KEY})\n  })\n})\n\nrouter.post('/recaptcha', (req, res, next) => {\n\n  let body = {response: req.body['g-recaptcha-response'], remoteip: req.ip}\n  let email = req.body.email\n\n  if ((!body.response | !email)) {\n    return res.status(400).json({error: 'Invalid parameters'})\n  }\n\n  validateSubmitter(body.response, body.remoteip, (err, result) => {\n    if (err)\n      return res.status(400).json(result)\n\n    return res.status(200).json(result)\n  })\n\n})\n\nrouter.post('/save-upload', (req, res, next) => {\n\n  // validateSubmitter(req)\n  res.json()\n\n})\n\nrouter.delete('/:id', (req, res, next) => {\n  let fileName = ''\n\n})\n\nfunction validateSubmitter (recaptcha, ip, cb) {\n  let url = `https://www.google.com/recaptcha/api/siteverify?secret= ${process.env.RECAPTCHA_SECRET}&response=${recaptcha}&remoteip=${ip}`\n  // let url = `https://www.google.com/recaptcha/api/siteverify`\n\n  let request = {\n    url: url,\n    method: 'POST',\n    encoding: undefined,\n    // body: JSON.stringify({secret: process.env.RECAPTCHA_SECRET, response: recaptcha, remoteip: ip})\n  }\n  nets(request, (err, res, body) => {\n    // console.log(err)\n    return cb(err, JSON.parse(body))\n  })\n}\n\nmodule.exports = router\n"]}