{"version":3,"sources":["../../routes/voice-mail.js"],"names":["express","require","router","Router","VoiceMessage","createSignedUrl","nets","level","createAudioSignature","csurf","cookie","MessagingResponse","twiml","get","req","res","next","links","find","isTemp","err","docs","render","title","images","map","vm","toObject","waveForm","key","push","filter","i","v","reverse","surl","meta","Key","_id","image","audio_path","join","site_key","process","env","RECAPTCHA_SITE_KEY","csrfToken","post","body","response","remoteip","ip","email","status","json","error","validateSubmitter","result","success","token","challenge_ts","put","jwtid","e","delete","fileName","message","writeHead","end","toString","recaptcha","cb","url","RECAPTCHA_SECRET","request","method","encoding","undefined","JSON","parse","module","exports"],"mappings":"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","file":"voice-mail.js","sourcesContent":["'use strict'\nvar express = require('express')\nvar router = express.Router()\nconst {VoiceMessage} = require('../lib/model')\nconst {createSignedUrl} = require('../lib/authorization')\nconst nets = require('nets')\nconst {level} = require('../level')('tokens')\nconst {createAudioSignature} = require('../lib/token')\nvar csurf = require('csurf')({cookie: true})\nconst MessagingResponse = require('twilio').twiml.MessagingResponse\n\nrouter.get('/', csurf, function (req, res, next) {\n  let links = []\n  VoiceMessage.find({isTemp: false}, (err, docs) => {\n    // let value = JSON.parse(data.value)\n    if (err) res.render('voice-mail', {title: 'Express', images: []})\n    links = docs.map((vm) => {return vm.toObject()}).map((vm) => {\n      let waveForm = []\n      for (var key in vm.waveForm) {\n        if (vm.waveForm[key])\n          waveForm.push(vm.waveForm[key])\n      }\n      waveForm = waveForm.filter((i, v) => {if (v) return v }).reverse()\n      let surl = createSignedUrl(vm.meta.Key)\n      return {key: vm._id, image: vm.image, audio_path: surl, waveForm: waveForm.join(',')}\n    })\n    res.render('voice-mail', {\n      title: 'Express',\n      images: links,\n      site_key: process.env.RECAPTCHA_SITE_KEY,\n      csrfToken: req.csrfToken()\n    })\n  })\n})\n\nrouter.post('/recaptcha', csurf, (req, res, next) => {\n\n  let body = {response: req.body['g-recaptcha-response'], remoteip: req.ip}\n  let email = req.body.email\n\n  if ((!body.response | !email)) {\n    return res.status(400).json({error: 'Invalid parameters'})\n  }\n\n  validateSubmitter(body.response, body.remoteip, (err, result) => {\n    if (err || !result.success)\n      return res.status(400).json(result)\n    let token = createAudioSignature({email: email, ip: req.ip, challenge_ts: result.challenge_ts})\n\n    if (token.error) {\n      return res.status(400).json({error: 'Could not validate submitter'})\n    }\n\n    level.put(token.jwtid, token, (e, success) => {\n      if (e) {\n        return next(e)\n      }\n\n      return res.status(200).json(token)\n    })\n  })\n})\n\nrouter.post('/save-upload', (req, res, next) => {\n\n  // validateSubmitter(req)\n  res.json()\n\n})\n\nrouter.delete('/:id', (req, res, next) => {\n  let fileName = ''\n\n})\n\nrouter.post('/webhook/incoming/sms', (req, res, next) => {\n  const twiml = new MessagingResponse()\n\n  twiml.message('When your near your computer go https://ericmiller.io/voice-mail and leave me a message.')\n\n  res.writeHead(200, {'Content-Type': 'text/xml'})\n  res.end(twiml.toString())\n})\n\nrouter.post('/webhook/incoming/sms/error', (req, res, next) => {\n  const twiml = new MessagingResponse()\n\n  twiml.message('The Robots are coming! Head for the hills!')\n\n  res.writeHead(200, {'Content-Type': 'text/xml'})\n  res.end(twiml.toString())\n})\n\nfunction validateSubmitter (recaptcha, ip, cb) {\n  let url = `https://www.google.com/recaptcha/api/siteverify?secret= ${process.env.RECAPTCHA_SECRET}&response=${recaptcha}&remoteip=${ip}`\n  let request = {\n    url: url,\n    method: 'POST',\n    encoding: undefined\n  }\n  nets(request, (err, res, body) => {\n    // console.log(err)\n    return cb(err, JSON.parse(body))\n  })\n}\n\nmodule.exports = router\n"]}