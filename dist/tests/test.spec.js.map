{"version":3,"sources":["../../tests/test.spec.js"],"names":["require","describe","it","before","moment","assert","should","valueEncoding","level","done","put","test","err","result","not","exist","get","equal","console","log","del"],"mappings":"AAAA;;eAC+BA,QAAQ,OAAR,C;IAAxBC,Q,YAAAA,Q;IAAUC,E,YAAAA,E;IAAIC,M,YAAAA,M;;AACrB,IAAMC,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,SAASL,QAAQ,QAAR,CAAf;AACA,IAAMM,SAASN,QAAQ,QAAR,CAAf;;gBACgBA,QAAQ,UAAR,EAAoB,IAApB,EAA0B,EAACO,eAAe,MAAhB,EAA1B,C;IAATC,K,aAAAA,K;;AACPP,SAAS,SAAT,EAAoB,YAAM;AACxBC,KAAG,KAAH,EAAU,UAACO,IAAD,EAAU;AAClBD,UAAME,GAAN,CAAU,KAAV,EAAiB,EAACC,MAAM,KAAP,EAAjB,EAAgC,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/CP,aAAOQ,GAAP,CAAWC,KAAX,CAAiBH,GAAjB;AACAN,aAAOS,KAAP,CAAaF,MAAb;AACAJ;AACD,KAJD;AAKD,GAND;AAOAP,KAAG,KAAH,EAAU,UAACO,IAAD,EAAU;AAClBD,UAAME,GAAN,CAAU,KAAV,EAAiB,EAACC,MAAM,KAAP,EAAjB,EAAgC,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/CP,aAAOQ,GAAP,CAAWC,KAAX,CAAiBH,GAAjB;AACAN,aAAOS,KAAP,CAAaF,MAAb;AACAL,YAAMQ,GAAN,CAAU,KAAV,EAAiB,UAACJ,GAAD,EAAMC,MAAN,EAAiB;;AAEhCP,eAAOQ,GAAP,CAAWC,KAAX,CAAiBH,GAAjB;AACAN,eAAOS,KAAP,CAAaF,MAAb;AACAP,eAAOO,OAAOF,IAAd,EAAoBM,KAApB,CAA0B,KAA1B;AACAC,gBAAQC,GAAR,CAAYN,MAAZ;AACAJ;AACD,OAPD;AAQD,KAXD;AAaD,GAdD;AAeAP,KAAG,QAAH,EAAa,UAACO,IAAD,EAAU;AACrBD,UAAME,GAAN,CAAU,KAAV,EAAiB,EAACC,MAAM,KAAP,EAAjB,EAAgC,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/CP,aAAOQ,GAAP,CAAWC,KAAX,CAAiBH,GAAjB;AACAN,aAAOS,KAAP,CAAaF,MAAb;AACAL,YAAMY,GAAN,CAAU,KAAV,EAAiB,UAACR,GAAD,EAAMC,MAAN,EAAiB;AAChCP,eAAOQ,GAAP,CAAWC,KAAX,CAAiBH,GAAjB;AACAN,eAAOS,KAAP,CAAaF,MAAb;AACAJ;AACD,OAJD;AAKD,KARD;AAUD,GAXD;AAYD,CAnCD","file":"test.spec.js","sourcesContent":["'use strict'\nconst {describe, it, before} = require('mocha')\nconst moment = require('moment')\nconst assert = require('assert')\nconst should = require('should')\nconst {level} = require('../level')('vm', {valueEncoding: 'json'})\ndescribe('levelup', () => {\n  it('put', (done) => {\n    level.put('key', {test: 'ing'}, (err, result) => {\n      should.not.exist(err)\n      should.exist(result)\n      done()\n    })\n  })\n  it('get', (done) => {\n    level.put('key', {test: 'ing'}, (err, result) => {\n      should.not.exist(err)\n      should.exist(result)\n      level.get('key', (err, result) => {\n\n        should.not.exist(err)\n        should.exist(result)\n        should(result.test).equal('ing')\n        console.log(result)\n        done()\n      })\n    })\n\n  })\n  it('delete', (done) => {\n    level.put('key', {test: 'ing'}, (err, result) => {\n      should.not.exist(err)\n      should.exist(result)\n      level.del('key', (err, result) => {\n        should.not.exist(err)\n        should.exist(result)\n        done()\n      })\n    })\n\n  })\n})"]}