{"version":3,"sources":["../../tests/test.spec.js"],"names":["process","env","NODE_ENV","require","config","describe","it","before","moment","assert","should","faker","uuid","VoiceMessage","ChatLog","createChannel","findChannel","d","done","person","internet","email","vm","creator","channel","messages","from","to","text","lorem","sentence","save","err","doc","not","exist","console","log","toObject","push","then","c","deepEqual"],"mappings":"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","file":"test.spec.js","sourcesContent":["'use strict'\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development'\nrequire('dotenv').config()\nconst {describe, it, before} = require('mocha')\nconst moment = require('moment')\nconst assert = require('assert')\nconst should = require('should')\nconst faker = require('faker')\nconst uuid = require('uuid')\n// const crypto = require('crypto').Hmac\n// const {level} = require('../level')('vm', {valueEncoding: 'json'})\n\nconst {VoiceMessage, ChatLog} = require('../lib/model')\nlet {createChannel, findChannel} = require('../lib/channel')\ndescribe('db', () => {\n  before('', (d) => {\n    require('../lib/db')(() => {\n      d()\n    })\n  })\n  it('chat', (done) => {\n    let person = faker.internet.email()\n    let vm = new ChatLog({\n      creator: person,\n      channel: `${person} Room`,\n      messages: [{\n        from: faker.internet.email(),\n        to: 'me',\n        text: faker.lorem.sentence()\n      }]\n    })\n\n    vm.save((err, doc) => {\n      should.not.exist(err)\n      should.exist(doc)\n      console.log(doc.toObject())\n      vm.messages.push(...[{\n        from: person,\n        to: 'epmiller8464@gmail.com',\n        text: faker.lorem.sentence()\n      }, {\n        from: 'epmiller8464@gmail.com',\n        to: person,\n        text: faker.lorem.sentence()\n      }, {\n        from: person,\n        to: 'epmiller8464@gmail.com',\n        text: faker.lorem.sentence()\n      }])\n\n      vm.save((err, doc) => {\n        should.not.exist(err)\n        should.exist(doc)\n        // vm.remove(() => {\n\n        done()\n        // })\n      })\n    })\n  })\n\n  it('createChannel', (done) => {\n    let person = faker.internet.email()\n    let channel = createChannel('hi', 'epm')\n\n    channel.then((doc) => {\n      should.exist(doc)\n      console.log(doc)\n      findChannel('hi').then((c) => {\n        should(c).deepEqual(doc)\n        done()\n      })\n    })\n  })\n  // it('put', (done) => {\n  //   level.put('key', {test: 'ing'}, (err, result) => {\n  //     should.not.exist(err)\n  //     should.exist(result)\n  //     done()\n  //   })\n  // })\n  // it('get', (done) => {\n  //   level.put('key', {test: 'ing'}, (err, result) => {\n  //     should.not.exist(err)\n  //     should.exist(result)\n  //     level.get('key', (err, result) => {\n  //\n  //       should.not.exist(err)\n  //       should.exist(result)\n  //       should(result.test).equal('ing')\n  //       console.log(result)\n  //       done()\n  //     })\n  //   })\n  //\n  // })\n  // it('delete', (done) => {\n  //   level.put('key', {test: 'ing'}, (err, result) => {\n  //     should.not.exist(err)\n  //     should.exist(result)\n  //     level.del('key', (err, result) => {\n  //       should.not.exist(err)\n  //       should.exist(result)\n  //       done()\n  //     })\n  //   })\n  //\n  // })\n})"]}