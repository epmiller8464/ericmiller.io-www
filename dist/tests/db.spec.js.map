{"version":3,"sources":["../../tests/db.spec.js"],"names":["process","env","NODE_ENV","require","config","describe","it","before","moment","assert","should","faker","uuid","MEM_STORE","TEST_DB","done","dbTest","instance","next","key","put","test","err","success","not","exist","equal","get","obj"],"mappings":"AAAA;;AACAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuBF,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA/C;AACAC,QAAQ,QAAR,EAAkBC,MAAlB;;eAC+BD,QAAQ,OAAR,C;IAAxBE,Q,YAAAA,Q;IAAUC,E,YAAAA,E;IAAIC,M,YAAAA,M;;AACrB,IAAMC,SAASL,QAAQ,QAAR,CAAf;AACA,IAAMM,SAASN,QAAQ,QAAR,CAAf;AACA,IAAMO,SAASP,QAAQ,QAAR,CAAf;AACA,IAAMQ,QAAQR,QAAQ,OAAR,CAAd;AACA,IAAMS,OAAOT,QAAQ,MAAR,CAAb;AACA,IAAIU,YAAYV,QAAQ,gCAAR,EAA0C,OAA1C,CAAhB;AACA,IAAIW,UAAUX,QAAQ,gCAAR,EAA0C,SAA1C,CAAd;;AAEAE,SAAS,IAAT,EAAe,YAAM;AACnB;AACA;AACA;;AAEAC,KAAG,MAAH,EAAW,UAACS,IAAD,EAAU;;AAEnBC,WAAOH,SAAP,EAAkB,YAAM;AACtBG,aAAOF,OAAP,EAAgBC,IAAhB;AACD,KAFD;AAGD,GALD;AAMD,CAXD;;AAaA,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAIC,MAAM,UAAV;AACAF,WAASG,GAAT,CAAaD,GAAb,EAAkB,EAACE,MAAM,KAAP,EAAlB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACjDb,WAAOc,GAAP,CAAWC,KAAX,CAAiBH,GAAjB;AACAZ,WAAOe,KAAP,CAAaF,OAAb;AACAb,WAAOa,OAAP,EAAgBG,KAAhB,CAAsB,IAAtB;AACAT,aAASU,GAAT,CAAaR,GAAb,EAAkB,UAACG,GAAD,EAAMM,GAAN,EAAc;AAC9BlB,aAAOc,GAAP,CAAWC,KAAX,CAAiBH,GAAjB;AACAZ,aAAOe,KAAP,CAAaG,GAAb;AACAlB,aAAOkB,IAAIP,IAAX,EAAiBK,KAAjB,CAAuB,KAAvB;AACAR;AACD,KALD;AAMD,GAVD;AAYD","file":"db.spec.js","sourcesContent":["'use strict'\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development'\nrequire('dotenv').config()\nconst {describe, it, before} = require('mocha')\nconst moment = require('moment')\nconst assert = require('assert')\nconst should = require('should')\nconst faker = require('faker')\nconst uuid = require('uuid')\nlet MEM_STORE = require('../lib/data-store/memory-store')('vm.db')\nlet TEST_DB = require('../lib/data-store/memory-store')('test.db')\n\ndescribe('db', () => {\n  // before('', (d) => {\n  //\n  // })\n\n  it('crud', (done) => {\n\n    dbTest(MEM_STORE, () => {\n      dbTest(TEST_DB, done)\n    })\n  })\n})\n\nfunction dbTest (instance, next) {\n  let key = 'some key'\n  instance.put(key, {test: 'ing'}, (err, success) => {\n    should.not.exist(err)\n    should.exist(success)\n    should(success).equal(true)\n    instance.get(key, (err, obj) => {\n      should.not.exist(err)\n      should.exist(obj)\n      should(obj.test).equal('ing')\n      next()\n    })\n  })\n\n}"]}