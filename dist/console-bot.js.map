{"version":3,"sources":["../console-bot.js"],"names":["os","require","IOBOT","module","exports","io","controller","debug","socket","hears","bot","message","storage","users","get","user","err","name","reply","startConversation","convo","ask","pattern","utterances","yes","callback","response","say","next","no","default","text","stop","repeat","on","status","id","extractResponse","save","match","setTimeout","process","exit","hostname","uptime","formatUptime","unit"],"mappings":"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","file":"console-bot.js","sourcesContent":["/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n           ______     ______     ______   __  __     __     ______\n          /\\  == \\   /\\  __ \\   /\\__  _\\ /\\ \\/ /    /\\ \\   /\\__  _\\\n          \\ \\  __<   \\ \\ \\/\\ \\  \\/_/\\ \\/ \\ \\  _\"-.  \\ \\ \\  \\/_/\\ \\/\n           \\ \\_____\\  \\ \\_____\\    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\    \\ \\_\\\n            \\/_____/   \\/_____/     \\/_/   \\/_/\\/_/   \\/_/     \\/_/\n\n\nThis is a sample Console bot built with Botkit.\n\nThis bot demonstrates many of the core features of Botkit:\n\n* Receive messages based on \"spoken\" patterns\n* Reply to messages\n* Use the conversation system to ask questions\n* Use the built in storage system to store and retrieve information\n  for a user.\n\n# RUN THE BOT:\n\n  Run your bot from the command line:\n\n    node console_bot.js\n\n# USE THE BOT:\n\n  Say: \"Hello\"\n\n  The bot will reply \"Hello!\"\n\n  Say: \"who are you?\"\n\n  The bot will tell you its name, where it is running, and for how long.\n\n  Say: \"Call me <nickname>\"\n\n  Tell the bot your nickname. Now you are friends.\n\n  Say: \"who am I?\"\n\n  The bot will tell you your nickname, if it knows one for you.\n\n  Say: \"shutdown\"\n\n  The bot will ask if you are sure, and then shut itself down.\n\n  Make sure to invite your bot into other channels using /invite @<my bot>!\n\n# EXTEND THE BOT:\n\n  Botkit has many features for building cool and useful bots!\n\n  Read all about it here:\n\n    -> http://howdy.ai/botkit\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n\n// var Botkit = require('botkit')\nvar os = require('os')\nconst IOBOT = require('./lib/bot/io_bot')\n\nmodule.exports = function (io) {\n\n// var controller = Botkit.consolebot({\n  var controller = IOBOT({\n    debug: true,\n    socket: io\n  })\n  // controller.on('socket:message_received', function (bot, message) {\n  //\n  //   let payload = {\n  //     text: 'hi',\n  //     user:\n  //     channel: 'text',\n  //     timestamp: Date.now()\n  //   }\n  //   controller.trigger('message_recevied', [bot, message])\n  // })\n  controller.hears(['hello', 'hi'], 'message_received', function (bot, message) {\n\n    controller.storage.users.get(message.user, function (err, user) {\n      if (user && user.name) {\n        bot.reply(message, 'Hello ' + user.name + '!!')\n      } else {\n        bot.reply(message, 'Hello.')\n      }\n    })\n  })\n\n  controller.hears(['help', 'can you'], 'message_received', function (bot, message)   {\n    bot.startConversation(message, function (err, convo) {\n      if (!err) {\n        // convo.say('I do not know your name yet!')\n        convo.ask('Do you need help?', [\n          {\n            pattern: bot.utterances.yes,\n            callback: function (response, convo) {\n              convo.say('Ok got it.')\n              convo.say('I can send you my resume. if you say things like \"resume\".')\n              convo.say('I can tell you about \"Eric\". if you say things like \"info, bio, who is eric, or tell me about eric\".')\n              convo.say('I can tell you about \"MeBot\". if you say things like \"who are you\",\"who\",\"identify yourself\".')\n\n              convo.next()\n            }\n          },\n          {\n            pattern: bot.utterances.no,\n            default: true,\n            callback: function (response, convo) {\n              convo.say('Ok...')\n              convo.next()\n            }\n          }\n        ])\n\n        // convo.on('end', function (convo) {\n        //   if (convo.status == 'completed') {\n        //     bot.reply(message, 'OK! I will update my dossier...')\n        //\n        //     controller.storage.users.get(message.user, function (err, user) {\n        //       if (!user) {\n        //         user = {\n        //           id: message.user,\n        //         }\n        //       }\n        //       user.name = convo.extractResponse('nickname')\n        //       controller.storage.users.save(user, function (err, id) {\n        //         bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.')\n        //       })\n        //     })\n        //\n        //   } else {\n        //     // this happens if the conversation ended prematurely for some reason\n        //     bot.reply(message, 'OK, nevermind!')\n        //   }\n        // })\n      }\n    })\n  })\n  controller.hears(['bio', 'who is eric', 'tell me about'], 'message_received', function (bot, message) {\n\n    bot.reply(message, 'Just a man who likes to build software, eat, and you.')\n  })\n  controller.hears(['resume', 'work info'], 'message_received', function (bot, message) {\n\n    bot.reply(message, 'Sorry still updating my resume.')\n  })\n  controller.hears(['work', 'available', 'job', 'opportunity'], 'message_received', function (bot, message) {\n\n    controller.storage.users.get(message.user, function (err, user) {\n      if (user && user.name) {\n        bot.startConversation(message, function (err, convo) {\n          if (!err) {\n            convo.say('I do not know your name yet!')\n            convo.ask('What should I call you?', function (response, convo) {\n              convo.ask('You want me to call you `' + response.text + '`?', [\n                {\n                  pattern: 'yes',\n                  callback: function (response, convo) {\n                    // since no further messages are queued after this,\n                    // the conversation will end naturally with status == 'completed'\n                    convo.next()\n                  }\n                },\n                {\n                  pattern: 'no',\n                  callback: function (response, convo) {\n                    // stop the conversation. this will cause it to end with status == 'stopped'\n                    convo.stop()\n                  }\n                },\n                {\n                  default: true,\n                  callback: function (response, convo) {\n                    convo.repeat()\n                    convo.next()\n                  }\n                }\n              ])\n\n              convo.next()\n\n            }, {'key': 'nickname'}) // store the results in a field called nickname\n\n            convo.on('end', function (convo) {\n              if (convo.status == 'completed') {\n                bot.reply(message, 'OK! I will update my dossier...')\n\n                controller.storage.users.get(message.user, function (err, user) {\n                  if (!user) {\n                    user = {\n                      id: message.user,\n                    }\n                  }\n                  user.name = convo.extractResponse('nickname')\n                  controller.storage.users.save(user, function (err, id) {\n                    bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.')\n                  })\n                })\n\n              } else {\n                // this happens if the conversation ended prematurely for some reason\n                bot.reply(message, 'OK, nevermind!')\n              }\n            })\n          }\n        })\n      } else {\n        bot.reply(message, 'Sorry I don\\'t know how to answer that.')\n      }\n    })\n  })\n\n  controller.hears(['call me (.*)', 'my name is (.*)'], 'message_received', function (bot, message) {\n    var name = message.match[1]\n    controller.storage.users.get(message.user, function (err, user) {\n      if (!user) {\n        user = {\n          id: message.user,\n        }\n      }\n      user.name = name\n      controller.storage.users.save(user, function (err, id) {\n        bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.')\n      })\n    })\n  })\n\n  controller.hears(['what is my name', 'who am i'], 'message_received', function (bot, message) {\n\n    controller.storage.users.get(message.user, function (err, user) {\n      if (user && user.name) {\n        bot.reply(message, 'Your name is ' + user.name)\n      } else {\n        bot.startConversation(message, function (err, convo) {\n          if (!err) {\n            convo.say('I do not know your name yet!')\n            convo.ask('What should I call you?', function (response, convo) {\n              convo.ask('You want me to call you `' + response.text + '`?', [\n                {\n                  pattern: 'yes',\n                  callback: function (response, convo) {\n                    // since no further messages are queued after this,\n                    // the conversation will end naturally with status == 'completed'\n                    convo.next()\n                  }\n                },\n                {\n                  pattern: 'no',\n                  callback: function (response, convo) {\n                    // stop the conversation. this will cause it to end with status == 'stopped'\n                    convo.stop()\n                  }\n                },\n                {\n                  default: true,\n                  callback: function (response, convo) {\n                    convo.repeat()\n                    convo.next()\n                  }\n                }\n              ])\n\n              convo.next()\n\n            }, {'key': 'nickname'}) // store the results in a field called nickname\n\n            convo.on('end', function (convo) {\n              if (convo.status == 'completed') {\n                bot.reply(message, 'OK! I will update my dossier...')\n\n                controller.storage.users.get(message.user, function (err, user) {\n                  if (!user) {\n                    user = {\n                      id: message.user,\n                    }\n                  }\n                  user.name = convo.extractResponse('nickname')\n                  controller.storage.users.save(user, function (err, id) {\n                    bot.reply(message, 'Got it. I will call you ' + user.name + ' from now on.')\n                  })\n                })\n\n              } else {\n                // this happens if the conversation ended prematurely for some reason\n                bot.reply(message, 'OK, nevermind!')\n              }\n            })\n          }\n        })\n      }\n    })\n  })\n\n  controller.hears(['shutdown'], 'message_received', function (bot, message) {\n\n    bot.startConversation(message, function (err, convo) {\n\n      convo.ask('Are you sure you want me to shutdown?', [\n        {\n          pattern: bot.utterances.yes,\n          callback: function (response, convo) {\n            convo.say('Bye!')\n            convo.next()\n            setTimeout(function () {\n              process.exit()\n            }, 3000)\n          }\n        },\n        {\n          pattern: bot.utterances.no,\n          default: true,\n          callback: function (response, convo) {\n            convo.say('*Phew!*')\n            convo.next()\n          }\n        }\n      ])\n    })\n  })\n\n  controller.hears(['uptime', 'identify yourself', 'who are you', 'what is your name'],\n    'message_received', function (bot, message) {\n\n      var hostname = os.hostname()\n      var uptime = formatUptime(process.uptime())\n\n      bot.reply(message,\n        ':robot_face: I am ConsoleBot. I have been running for ' + uptime + ' on ' + hostname + '.')\n\n    })\n\n  function formatUptime (uptime) {\n    var unit = 'second'\n    if (uptime > 60) {\n      uptime = uptime / 60\n      unit = 'minute'\n    }\n    if (uptime > 60) {\n      uptime = uptime / 60\n      unit = 'hour'\n    }\n    if (uptime != 1) {\n      unit = unit + 's'\n    }\n\n    uptime = uptime + ' ' + unit\n    return uptime\n  }\n\n  return controller\n}\n"]}